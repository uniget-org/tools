{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    ":dependencyDashboard",
    ":semanticPrefixFixDepsChoreOthers",
    ":ignoreModulesAndTests",
    ":docker",
    "docker:enableMajor",
    "docker:pinDigests",
    ":ignoreUnstable",
    ":pinVersions",
    ":separateMajorReleases",
    ":separatePatchReleases",
    ":semanticCommits"
  ],
  "timezone": "Europe/Berlin",
  "prConcurrentLimit": 0,
  "prHourlyLimit": 0,
  "enabledManagers": [
    "dockerfile",
    "github-actions",
    "regex"
  ],
  "useBaseBranchConfig": "merge",
  "platformAutomerge": true,
  "rebaseWhen": "conflicted",
  "rebaseLabel": "renovate/rebase",
  "stopUpdatingLabel": "renovate/stop-updating",
  "recreateClosed": false,
  "major": {
    "labels": [
      "bump/major",
      "type/renovate"
    ]
  },
  "minor": {
    "labels": [
      "bump/minor",
      "type/renovate"
    ]
  },
  "patch": {
    "labels": [
      "bump/patch",
      "type/renovate"
    ]
  },
  "pin": {
    "labels": [
      "bump/pin",
      "type/renovate"
    ]
  },
  "digest": {
    "labels": [
      "bump/digest",
      "type/renovate"
    ]
  },
  "packageRules": [
    {
      "matchDatasources": [
        "docker"
      ],
      "matchPackagePrefixes": [
        "ghcr.io/uniget-org/tools/",
        "ghcr.io/uniget-org/images/"
      ],
      "enabled": false
    },
    {
      "matchFiles": [
        "^tools/acorn/manifest.yaml$"
      ],
      "commitMessageTopic": "acorn"
    },
    {
      "matchFiles": [
        "^tools/acr/manifest.yaml$"
      ],
      "commitMessageTopic": "acr"
    },
    {
      "matchFiles": [
        "^tools/act/manifest.yaml$"
      ],
      "commitMessageTopic": "act"
    },
    {
      "matchFiles": [
        "^tools/actions-runner/manifest.yaml$"
      ],
      "commitMessageTopic": "actions-runner"
    },
    {
      "matchFiles": [
        "^tools/actions-usage/manifest.yaml$"
      ],
      "commitMessageTopic": "actions-usage"
    },
    {
      "matchFiles": [
        "^tools/age/manifest.yaml$"
      ],
      "commitMessageTopic": "age"
    },
    {
      "matchFiles": [
        "^tools/ah/manifest.yaml$"
      ],
      "commitMessageTopic": "ah"
    },
    {
      "matchFiles": [
        "^tools/aiac/manifest.yaml$"
      ],
      "commitMessageTopic": "aiac"
    },
    {
      "matchFiles": [
        "^tools/aichat/manifest.yaml$"
      ],
      "commitMessageTopic": "aichat"
    },
    {
      "matchFiles": [
        "^tools/aider/manifest.yaml$"
      ],
      "commitMessageTopic": "aider"
    },
    {
      "matchFiles": [
        "^tools/air/manifest.yaml$"
      ],
      "commitMessageTopic": "air"
    },
    {
      "matchFiles": [
        "^tools/alertmanager/manifest.yaml$"
      ],
      "commitMessageTopic": "alertmanager"
    },
    {
      "matchFiles": [
        "^tools/alex/manifest.yaml$"
      ],
      "commitMessageTopic": "alex"
    },
    {
      "matchFiles": [
        "^tools/ansi/manifest.yaml$"
      ],
      "commitMessageTopic": "ansi"
    },
    {
      "matchFiles": [
        "^tools/apk/manifest.yaml$"
      ],
      "commitMessageTopic": "apk"
    },
    {
      "matchFiles": [
        "^tools/apko/manifest.yaml$"
      ],
      "commitMessageTopic": "apko",
      "matchPackageNames": [
        "chainguard-dev/apko"
      ],
      "ignoreUnstable": true
    },
    {
      "matchFiles": [
        "^tools/aqua/manifest.yaml$"
      ],
      "commitMessageTopic": "aqua"
    },
    {
      "matchFiles": [
        "^tools/argo/manifest.yaml$"
      ],
      "commitMessageTopic": "argo"
    },
    {
      "matchFiles": [
        "^tools/argocd/manifest.yaml$"
      ],
      "commitMessageTopic": "argocd"
    },
    {
      "matchFiles": [
        "^tools/arkade/manifest.yaml$"
      ],
      "commitMessageTopic": "arkade"
    },
    {
      "matchFiles": [
        "^tools/artifactory-cleanup/manifest.yaml$"
      ],
      "commitMessageTopic": "artifactory-cleanup"
    },
    {
      "matchFiles": [
        "^tools/asciigraph/manifest.yaml$"
      ],
      "commitMessageTopic": "asciigraph"
    },
    {
      "matchFiles": [
        "^tools/asciinema/manifest.yaml$"
      ],
      "commitMessageTopic": "asciinema"
    },
    {
      "matchFiles": [
        "^tools/autocert/manifest.yaml$"
      ],
      "commitMessageTopic": "autocert"
    },
    {
      "matchFiles": [
        "^tools/aws/manifest.yaml$"
      ],
      "commitMessageTopic": "aws"
    },
    {
      "matchFiles": [
        "^tools/aws2/manifest.yaml$"
      ],
      "commitMessageTopic": "aws2"
    },
    {
      "matchFiles": [
        "^tools/axel/manifest.yaml$"
      ],
      "commitMessageTopic": "axel"
    },
    {
      "matchFiles": [
        "^tools/az/manifest.yaml$"
      ],
      "commitMessageTopic": "az"
    },
    {
      "matchFiles": [
        "^tools/bandwhich/manifest.yaml$"
      ],
      "commitMessageTopic": "bandwhich"
    },
    {
      "matchFiles": [
        "^tools/bat/manifest.yaml$"
      ],
      "commitMessageTopic": "bat"
    },
    {
      "matchFiles": [
        "^tools/bento/manifest.yaml$"
      ],
      "commitMessageTopic": "bento"
    },
    {
      "matchFiles": [
        "^tools/bicep/manifest.yaml$"
      ],
      "commitMessageTopic": "bicep"
    },
    {
      "matchFiles": [
        "^tools/bif/manifest.yaml$"
      ],
      "commitMessageTopic": "bif"
    },
    {
      "matchFiles": [
        "^tools/bin/manifest.yaml$"
      ],
      "commitMessageTopic": "bin"
    },
    {
      "matchFiles": [
        "^tools/blackbox-exporter/manifest.yaml$"
      ],
      "commitMessageTopic": "blackbox-exporter"
    },
    {
      "matchFiles": [
        "^tools/blincus/manifest.yaml$"
      ],
      "commitMessageTopic": "blincus"
    },
    {
      "matchFiles": [
        "^tools/bogrod/manifest.yaml$"
      ],
      "commitMessageTopic": "bogrod"
    },
    {
      "matchFiles": [
        "^tools/bom/manifest.yaml$"
      ],
      "commitMessageTopic": "bom"
    },
    {
      "matchFiles": [
        "^tools/bomber/manifest.yaml$"
      ],
      "commitMessageTopic": "bomber"
    },
    {
      "matchFiles": [
        "^tools/bomshell/manifest.yaml$"
      ],
      "commitMessageTopic": "bomshell"
    },
    {
      "matchFiles": [
        "^tools/botsay/manifest.yaml$"
      ],
      "commitMessageTopic": "botsay"
    },
    {
      "matchFiles": [
        "^tools/box/manifest.yaml$"
      ],
      "commitMessageTopic": "box"
    },
    {
      "matchFiles": [
        "^tools/bpftool/manifest.yaml$"
      ],
      "commitMessageTopic": "bpftool"
    },
    {
      "matchFiles": [
        "^tools/bubblewrap/manifest.yaml$"
      ],
      "commitMessageTopic": "bubblewrap"
    },
    {
      "matchFiles": [
        "^tools/buildah/manifest.yaml$"
      ],
      "commitMessageTopic": "buildah"
    },
    {
      "matchFiles": [
        "^tools/buildg/manifest.yaml$"
      ],
      "commitMessageTopic": "buildg"
    },
    {
      "matchFiles": [
        "^tools/buildkit/manifest.yaml$"
      ],
      "commitMessageTopic": "buildkit"
    },
    {
      "matchFiles": [
        "^tools/buildx/manifest.yaml$"
      ],
      "commitMessageTopic": "buildx"
    },
    {
      "matchFiles": [
        "^tools/bumblebee/manifest.yaml$"
      ],
      "commitMessageTopic": "bumblebee"
    },
    {
      "matchFiles": [
        "^tools/bypass4netns/manifest.yaml$"
      ],
      "commitMessageTopic": "bypass4netns"
    },
    {
      "matchFiles": [
        "^tools/caddy/manifest.yaml$"
      ],
      "commitMessageTopic": "caddy"
    },
    {
      "matchFiles": [
        "^tools/cadvisor/manifest.yaml$"
      ],
      "commitMessageTopic": "cadvisor"
    },
    {
      "matchFiles": [
        "^tools/calicoctl/manifest.yaml$"
      ],
      "commitMessageTopic": "calicoctl"
    },
    {
      "matchFiles": [
        "^tools/car/manifest.yaml$"
      ],
      "commitMessageTopic": "car"
    },
    {
      "matchFiles": [
        "^tools/cascadia-code/manifest.yaml$"
      ],
      "commitMessageTopic": "cascadia-code"
    },
    {
      "matchFiles": [
        "^tools/catatonit/manifest.yaml$"
      ],
      "commitMessageTopic": "catatonit"
    },
    {
      "matchFiles": [
        "^tools/catgpt/manifest.yaml$"
      ],
      "commitMessageTopic": "catgpt"
    },
    {
      "matchFiles": [
        "^tools/cdebug/manifest.yaml$"
      ],
      "commitMessageTopic": "cdebug"
    },
    {
      "matchFiles": [
        "^tools/cdncheck/manifest.yaml$"
      ],
      "commitMessageTopic": "cdncheck"
    },
    {
      "matchFiles": [
        "^tools/cdxgen/manifest.yaml$"
      ],
      "commitMessageTopic": "cdxgen"
    },
    {
      "matchFiles": [
        "^tools/cfssl/manifest.yaml$"
      ],
      "commitMessageTopic": "cfssl"
    },
    {
      "matchFiles": [
        "^tools/chainsaw/manifest.yaml$"
      ],
      "commitMessageTopic": "chainsaw"
    },
    {
      "matchFiles": [
        "^tools/charm/manifest.yaml$"
      ],
      "commitMessageTopic": "charm"
    },
    {
      "matchFiles": [
        "^tools/chart-releaser/manifest.yaml$"
      ],
      "commitMessageTopic": "chart-releaser"
    },
    {
      "matchFiles": [
        "^tools/chart-testing/manifest.yaml$"
      ],
      "commitMessageTopic": "chart-testing"
    },
    {
      "matchFiles": [
        "^tools/cheat/manifest.yaml$"
      ],
      "commitMessageTopic": "cheat"
    },
    {
      "matchFiles": [
        "^tools/checkov/manifest.yaml$"
      ],
      "commitMessageTopic": "checkov"
    },
    {
      "matchFiles": [
        "^tools/chekr/manifest.yaml$"
      ],
      "commitMessageTopic": "chekr"
    },
    {
      "matchFiles": [
        "^tools/chigo/manifest.yaml$"
      ],
      "commitMessageTopic": "chigo"
    },
    {
      "matchFiles": [
        "^tools/chisel/manifest.yaml$"
      ],
      "commitMessageTopic": "chisel"
    },
    {
      "matchFiles": [
        "^tools/chroma/manifest.yaml$"
      ],
      "commitMessageTopic": "chroma"
    },
    {
      "matchFiles": [
        "^tools/cilium/manifest.yaml$"
      ],
      "commitMessageTopic": "cilium"
    },
    {
      "matchFiles": [
        "^tools/cinf/manifest.yaml$"
      ],
      "commitMessageTopic": "cinf"
    },
    {
      "matchFiles": [
        "^tools/civo/manifest.yaml$"
      ],
      "commitMessageTopic": "civo"
    },
    {
      "matchFiles": [
        "^tools/click/manifest.yaml$"
      ],
      "commitMessageTopic": "click"
    },
    {
      "matchFiles": [
        "^tools/clive/manifest.yaml$"
      ],
      "commitMessageTopic": "clive"
    },
    {
      "matchFiles": [
        "^tools/cloudflared/manifest.yaml$"
      ],
      "commitMessageTopic": "cloudflared"
    },
    {
      "matchFiles": [
        "^tools/clusterawsadm/manifest.yaml$"
      ],
      "commitMessageTopic": "clusterawsadm"
    },
    {
      "matchFiles": [
        "^tools/clusterctl/manifest.yaml$"
      ],
      "commitMessageTopic": "clusterctl"
    },
    {
      "matchFiles": [
        "^tools/clusterlint/manifest.yaml$"
      ],
      "commitMessageTopic": "clusterlint"
    },
    {
      "matchFiles": [
        "^tools/cmctl/manifest.yaml$"
      ],
      "commitMessageTopic": "cmctl"
    },
    {
      "matchFiles": [
        "^tools/cni/manifest.yaml$"
      ],
      "commitMessageTopic": "cni"
    },
    {
      "matchFiles": [
        "^tools/cnitool/manifest.yaml$"
      ],
      "commitMessageTopic": "cnitool"
    },
    {
      "matchFiles": [
        "^tools/cntr/manifest.yaml$"
      ],
      "commitMessageTopic": "cntr"
    },
    {
      "matchFiles": [
        "^tools/cobra-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "cobra-cli"
    },
    {
      "matchFiles": [
        "^tools/cockroach/manifest.yaml$"
      ],
      "commitMessageTopic": "cockroach"
    },
    {
      "matchFiles": [
        "^tools/coder/manifest.yaml$"
      ],
      "commitMessageTopic": "coder"
    },
    {
      "matchFiles": [
        "^tools/code-server/manifest.yaml$"
      ],
      "commitMessageTopic": "code-server"
    },
    {
      "matchFiles": [
        "^tools/colima/manifest.yaml$"
      ],
      "commitMessageTopic": "colima"
    },
    {
      "matchFiles": [
        "^tools/compose-bridge/manifest.yaml$"
      ],
      "commitMessageTopic": "compose-bridge"
    },
    {
      "matchFiles": [
        "^tools/composer/manifest.yaml$"
      ],
      "commitMessageTopic": "composer"
    },
    {
      "matchFiles": [
        "^tools/composerize/manifest.yaml$"
      ],
      "commitMessageTopic": "composerize"
    },
    {
      "matchFiles": [
        "^tools/concourse/manifest.yaml$"
      ],
      "commitMessageTopic": "concourse"
    },
    {
      "matchFiles": [
        "^tools/conftest/manifest.yaml$"
      ],
      "commitMessageTopic": "conftest"
    },
    {
      "matchFiles": [
        "^tools/conmon/manifest.yaml$"
      ],
      "commitMessageTopic": "conmon"
    },
    {
      "matchFiles": [
        "^tools/consul/manifest.yaml$"
      ],
      "commitMessageTopic": "consul"
    },
    {
      "matchFiles": [
        "^tools/container2wasm/manifest.yaml$"
      ],
      "commitMessageTopic": "container2wasm"
    },
    {
      "matchFiles": [
        "^tools/containerd/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-lunatic/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-lunatic"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-slight/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-slight"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-spin/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-spin"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-spin-runwasi/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-spin-runwasi"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-wasmedge/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-wasmedge"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-wasmer/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-wasmer"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-wasmtime/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-wasmtime"
    },
    {
      "matchFiles": [
        "^tools/containerd-shim-wws/manifest.yaml$"
      ],
      "commitMessageTopic": "containerd-shim-wws"
    },
    {
      "matchFiles": [
        "^tools/containers-common/manifest.yaml$"
      ],
      "commitMessageTopic": "containers-common"
    },
    {
      "matchFiles": [
        "^tools/containers-image/manifest.yaml$"
      ],
      "commitMessageTopic": "containers-image"
    },
    {
      "matchFiles": [
        "^tools/containerssh/manifest.yaml$"
      ],
      "commitMessageTopic": "containerssh"
    },
    {
      "matchFiles": [
        "^tools/containers-storage/manifest.yaml$"
      ],
      "commitMessageTopic": "containers-storage"
    },
    {
      "matchFiles": [
        "^tools/copa/manifest.yaml$"
      ],
      "commitMessageTopic": "copa"
    },
    {
      "matchFiles": [
        "^tools/cosign/manifest.yaml$"
      ],
      "commitMessageTopic": "cosign"
    },
    {
      "matchFiles": [
        "^tools/cowsay/manifest.yaml$"
      ],
      "commitMessageTopic": "cowsay"
    },
    {
      "matchFiles": [
        "^tools/crane/manifest.yaml$"
      ],
      "commitMessageTopic": "crane"
    },
    {
      "matchFiles": [
        "^tools/crictl/manifest.yaml$"
      ],
      "commitMessageTopic": "crictl"
    },
    {
      "matchFiles": [
        "^tools/cri-dockerd/manifest.yaml$"
      ],
      "commitMessageTopic": "cri-dockerd"
    },
    {
      "matchFiles": [
        "^tools/cri-o/manifest.yaml$"
      ],
      "commitMessageTopic": "cri-o"
    },
    {
      "matchFiles": [
        "^tools/croc/manifest.yaml$"
      ],
      "commitMessageTopic": "croc"
    },
    {
      "matchFiles": [
        "^tools/cross/manifest.yaml$"
      ],
      "commitMessageTopic": "cross"
    },
    {
      "matchFiles": [
        "^tools/crossplane/manifest.yaml$"
      ],
      "commitMessageTopic": "crossplane"
    },
    {
      "matchFiles": [
        "^tools/crun/manifest.yaml$"
      ],
      "commitMessageTopic": "crun"
    },
    {
      "matchFiles": [
        "^tools/csvlens/manifest.yaml$"
      ],
      "commitMessageTopic": "csvlens"
    },
    {
      "matchFiles": [
        "^tools/ct/manifest.yaml$"
      ],
      "commitMessageTopic": "ct"
    },
    {
      "matchFiles": [
        "^tools/ctop/manifest.yaml$"
      ],
      "commitMessageTopic": "ctop"
    },
    {
      "matchFiles": [
        "^tools/ct_server/manifest.yaml$"
      ],
      "commitMessageTopic": "ct_server"
    },
    {
      "matchFiles": [
        "^tools/cue/manifest.yaml$"
      ],
      "commitMessageTopic": "cue"
    },
    {
      "matchFiles": [
        "^tools/curl/manifest.yaml$"
      ],
      "commitMessageTopic": "curl"
    },
    {
      "matchFiles": [
        "^tools/curlie/manifest.yaml$"
      ],
      "commitMessageTopic": "curlie"
    },
    {
      "matchFiles": [
        "^tools/cve-bin-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "cve-bin-tool"
    },
    {
      "matchFiles": [
        "^tools/cvemap/manifest.yaml$"
      ],
      "commitMessageTopic": "cvemap"
    },
    {
      "matchFiles": [
        "^tools/cyclonedx-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "cyclonedx-cli"
    },
    {
      "matchFiles": [
        "^tools/cyclonedx-gomod/manifest.yaml$"
      ],
      "commitMessageTopic": "cyclonedx-gomod"
    },
    {
      "matchFiles": [
        "^tools/cyphernetes/manifest.yaml$"
      ],
      "commitMessageTopic": "cyphernetes"
    },
    {
      "matchFiles": [
        "^tools/cypher-shell/manifest.yaml$"
      ],
      "commitMessageTopic": "cypher-shell"
    },
    {
      "matchFiles": [
        "^tools/dagger/manifest.yaml$"
      ],
      "commitMessageTopic": "dagger"
    },
    {
      "matchFiles": [
        "^tools/dart/manifest.yaml$"
      ],
      "commitMessageTopic": "dart"
    },
    {
      "matchFiles": [
        "^tools/dasel/manifest.yaml$"
      ],
      "commitMessageTopic": "dasel"
    },
    {
      "matchFiles": [
        "^tools/datree/manifest.yaml$"
      ],
      "commitMessageTopic": "datree"
    },
    {
      "matchFiles": [
        "^tools/daytona/manifest.yaml$"
      ],
      "commitMessageTopic": "daytona"
    },
    {
      "matchFiles": [
        "^tools/dbui/manifest.yaml$"
      ],
      "commitMessageTopic": "dbui"
    },
    {
      "matchFiles": [
        "^tools/dcp/manifest.yaml$"
      ],
      "commitMessageTopic": "dcp"
    },
    {
      "matchFiles": [
        "^tools/ddosify/manifest.yaml$"
      ],
      "commitMessageTopic": "ddosify"
    },
    {
      "matchFiles": [
        "^tools/decktape/manifest.yaml$"
      ],
      "commitMessageTopic": "decktape"
    },
    {
      "matchFiles": [
        "^tools/delta/manifest.yaml$"
      ],
      "commitMessageTopic": "delta"
    },
    {
      "matchFiles": [
        "^tools/deno/manifest.yaml$"
      ],
      "commitMessageTopic": "deno"
    },
    {
      "matchFiles": [
        "^tools/dependency-check/manifest.yaml$"
      ],
      "commitMessageTopic": "dependency-check"
    },
    {
      "matchFiles": [
        "^tools/depot/manifest.yaml$"
      ],
      "commitMessageTopic": "depot"
    },
    {
      "matchFiles": [
        "^tools/dep-tree/manifest.yaml$"
      ],
      "commitMessageTopic": "dep-tree"
    },
    {
      "matchFiles": [
        "^tools/devbox/manifest.yaml$"
      ],
      "commitMessageTopic": "devbox"
    },
    {
      "matchFiles": [
        "^tools/devcontainer/manifest.yaml$"
      ],
      "commitMessageTopic": "devcontainer"
    },
    {
      "matchFiles": [
        "^tools/devpod/manifest.yaml$"
      ],
      "commitMessageTopic": "devpod"
    },
    {
      "matchFiles": [
        "^tools/diffoci/manifest.yaml$"
      ],
      "commitMessageTopic": "diffoci"
    },
    {
      "matchFiles": [
        "^tools/dinit/manifest.yaml$"
      ],
      "commitMessageTopic": "dinit"
    },
    {
      "matchFiles": [
        "^tools/direnv/manifest.yaml$"
      ],
      "commitMessageTopic": "direnv"
    },
    {
      "matchFiles": [
        "^tools/distrobox/manifest.yaml$"
      ],
      "commitMessageTopic": "distrobox"
    },
    {
      "matchFiles": [
        "^tools/diun/manifest.yaml$"
      ],
      "commitMessageTopic": "diun"
    },
    {
      "matchFiles": [
        "^tools/dive/manifest.yaml$"
      ],
      "commitMessageTopic": "dive"
    },
    {
      "matchFiles": [
        "^tools/dnsx/manifest.yaml$"
      ],
      "commitMessageTopic": "dnsx"
    },
    {
      "matchFiles": [
        "^tools/docker/manifest.yaml$"
      ],
      "commitMessageTopic": "docker"
    },
    {
      "matchFiles": [
        "^tools/docker-base/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-base"
    },
    {
      "matchFiles": [
        "^tools/docker-compose/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-compose"
    },
    {
      "matchFiles": [
        "^tools/docker-compose-switch/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-compose-switch"
    },
    {
      "matchFiles": [
        "^tools/docker-compose-v1/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-compose-v1"
    },
    {
      "matchFiles": [
        "^tools/docker-credential-acr-env/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-credential-acr-env"
    },
    {
      "matchFiles": [
        "^tools/docker-credential-ecr-login/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-credential-ecr-login"
    },
    {
      "matchFiles": [
        "^tools/docker-credential-gcr/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-credential-gcr"
    },
    {
      "matchFiles": [
        "^tools/docker-credential-helpers/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-credential-helpers"
    },
    {
      "matchFiles": [
        "^tools/docker-credential-magic/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-credential-magic"
    },
    {
      "matchFiles": [
        "^tools/docker-debug/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-debug"
    },
    {
      "matchFiles": [
        "^tools/docker-desktop/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-desktop"
    },
    {
      "matchFiles": [
        "^tools/dockerfilegraph/manifest.yaml$"
      ],
      "commitMessageTopic": "dockerfilegraph"
    },
    {
      "matchFiles": [
        "^tools/docker-gen/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-gen"
    },
    {
      "matchFiles": [
        "^tools/docker-index/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-index"
    },
    {
      "matchFiles": [
        "^tools/docker-init/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-init"
    },
    {
      "matchFiles": [
        "^tools/docker-machine/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-machine"
    },
    {
      "matchFiles": [
        "^tools/docker-manpages/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-manpages"
    },
    {
      "matchFiles": [
        "^tools/docker-preview/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-preview",
      "matchPackageNames": [
        "moby/moby"
      ],
      "ignoreUnstable": true
    },
    {
      "matchFiles": [
        "^tools/docker-rootless/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-rootless"
    },
    {
      "matchFiles": [
        "^tools/docker-sbom/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-sbom"
    },
    {
      "matchFiles": [
        "^tools/docker-scout/manifest.yaml$"
      ],
      "commitMessageTopic": "docker-scout"
    },
    {
      "matchFiles": [
        "^tools/dockle/manifest.yaml$"
      ],
      "commitMessageTopic": "dockle"
    },
    {
      "matchFiles": [
        "^tools/docuum/manifest.yaml$"
      ],
      "commitMessageTopic": "docuum"
    },
    {
      "matchFiles": [
        "^tools/doggo/manifest.yaml$"
      ],
      "commitMessageTopic": "doggo"
    },
    {
      "matchFiles": [
        "^tools/dot/manifest.yaml$"
      ],
      "commitMessageTopic": "dot"
    },
    {
      "matchFiles": [
        "^tools/dotenvx/manifest.yaml$"
      ],
      "commitMessageTopic": "dotenvx"
    },
    {
      "matchFiles": [
        "^tools/dotnet-runtime/manifest.yaml$"
      ],
      "commitMessageTopic": "dotnet-runtime"
    },
    {
      "matchFiles": [
        "^tools/dotnet-sdk/manifest.yaml$"
      ],
      "commitMessageTopic": "dotnet-sdk"
    },
    {
      "matchFiles": [
        "^tools/dragonfly/manifest.yaml$"
      ],
      "commitMessageTopic": "dragonfly"
    },
    {
      "matchFiles": [
        "^tools/dry/manifest.yaml$"
      ],
      "commitMessageTopic": "dry"
    },
    {
      "matchFiles": [
        "^tools/dua/manifest.yaml$"
      ],
      "commitMessageTopic": "dua"
    },
    {
      "matchFiles": [
        "^tools/duf/manifest.yaml$"
      ],
      "commitMessageTopic": "duf"
    },
    {
      "matchFiles": [
        "^tools/duffle/manifest.yaml$"
      ],
      "commitMessageTopic": "duffle"
    },
    {
      "matchFiles": [
        "^tools/dumb-init/manifest.yaml$"
      ],
      "commitMessageTopic": "dumb-init"
    },
    {
      "matchFiles": [
        "^tools/dyff/manifest.yaml$"
      ],
      "commitMessageTopic": "dyff"
    },
    {
      "matchFiles": [
        "^tools/earthly/manifest.yaml$"
      ],
      "commitMessageTopic": "earthly"
    },
    {
      "matchFiles": [
        "^tools/ecapture/manifest.yaml$"
      ],
      "commitMessageTopic": "ecapture"
    },
    {
      "matchFiles": [
        "^tools/eksctl/manifest.yaml$"
      ],
      "commitMessageTopic": "eksctl"
    },
    {
      "matchFiles": [
        "^tools/ekz/manifest.yaml$"
      ],
      "commitMessageTopic": "ekz"
    },
    {
      "matchFiles": [
        "^tools/elia/manifest.yaml$"
      ],
      "commitMessageTopic": "elia"
    },
    {
      "matchFiles": [
        "^tools/emoj/manifest.yaml$"
      ],
      "commitMessageTopic": "emoj"
    },
    {
      "matchFiles": [
        "^tools/emojisum/manifest.yaml$"
      ],
      "commitMessageTopic": "emojisum"
    },
    {
      "matchFiles": [
        "^tools/envcli/manifest.yaml$"
      ],
      "commitMessageTopic": "envcli"
    },
    {
      "matchFiles": [
        "^tools/envsub/manifest.yaml$"
      ],
      "commitMessageTopic": "envsub"
    },
    {
      "matchFiles": [
        "^tools/esbuild/manifest.yaml$"
      ],
      "commitMessageTopic": "esbuild"
    },
    {
      "matchFiles": [
        "^tools/etcd/manifest.yaml$"
      ],
      "commitMessageTopic": "etcd"
    },
    {
      "matchFiles": [
        "^tools/etcdadm/manifest.yaml$"
      ],
      "commitMessageTopic": "etcdadm"
    },
    {
      "matchFiles": [
        "^tools/exa/manifest.yaml$"
      ],
      "commitMessageTopic": "exa"
    },
    {
      "matchFiles": [
        "^tools/ezghsa/manifest.yaml$"
      ],
      "commitMessageTopic": "ezghsa"
    },
    {
      "matchFiles": [
        "^tools/faas-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "faas-cli"
    },
    {
      "matchFiles": [
        "^tools/faasd/manifest.yaml$"
      ],
      "commitMessageTopic": "faasd"
    },
    {
      "matchFiles": [
        "^tools/fabric/manifest.yaml$"
      ],
      "commitMessageTopic": "fabric"
    },
    {
      "matchFiles": [
        "^tools/falco/manifest.yaml$"
      ],
      "commitMessageTopic": "falco"
    },
    {
      "matchFiles": [
        "^tools/falcosidekick/manifest.yaml$"
      ],
      "commitMessageTopic": "falcosidekick"
    },
    {
      "matchFiles": [
        "^tools/fastgron/manifest.yaml$"
      ],
      "commitMessageTopic": "fastgron"
    },
    {
      "matchFiles": [
        "^tools/fd/manifest.yaml$"
      ],
      "commitMessageTopic": "fd"
    },
    {
      "matchFiles": [
        "^tools/figlet/manifest.yaml$"
      ],
      "commitMessageTopic": "figlet"
    },
    {
      "matchFiles": [
        "^tools/firecracker/manifest.yaml$"
      ],
      "commitMessageTopic": "firecracker"
    },
    {
      "matchFiles": [
        "^tools/firectl/manifest.yaml$"
      ],
      "commitMessageTopic": "firectl"
    },
    {
      "matchFiles": [
        "^tools/firejail/manifest.yaml$"
      ],
      "commitMessageTopic": "firejail"
    },
    {
      "matchFiles": [
        "^tools/flameshow/manifest.yaml$"
      ],
      "commitMessageTopic": "flameshow"
    },
    {
      "matchFiles": [
        "^tools/flarectl/manifest.yaml$"
      ],
      "commitMessageTopic": "flarectl"
    },
    {
      "matchFiles": [
        "^tools/fleet/manifest.yaml$"
      ],
      "commitMessageTopic": "fleet"
    },
    {
      "matchFiles": [
        "^tools/floodgate/manifest.yaml$"
      ],
      "commitMessageTopic": "floodgate"
    },
    {
      "matchFiles": [
        "^tools/flux/manifest.yaml$"
      ],
      "commitMessageTopic": "flux"
    },
    {
      "matchFiles": [
        "^tools/flux2/manifest.yaml$"
      ],
      "commitMessageTopic": "flux2"
    },
    {
      "matchFiles": [
        "^tools/flyctl/manifest.yaml$"
      ],
      "commitMessageTopic": "flyctl"
    },
    {
      "matchFiles": [
        "^tools/fontawesome-free/manifest.yaml$"
      ],
      "commitMessageTopic": "fontawesome-free"
    },
    {
      "matchFiles": [
        "^tools/footloose/manifest.yaml$"
      ],
      "commitMessageTopic": "footloose"
    },
    {
      "matchFiles": [
        "^tools/forgejo/manifest.yaml$"
      ],
      "commitMessageTopic": "forgejo"
    },
    {
      "matchFiles": [
        "^tools/forgit/manifest.yaml$"
      ],
      "commitMessageTopic": "forgit"
    },
    {
      "matchFiles": [
        "^tools/foyle/manifest.yaml$"
      ],
      "commitMessageTopic": "foyle"
    },
    {
      "matchFiles": [
        "^tools/fq/manifest.yaml$"
      ],
      "commitMessageTopic": "fq"
    },
    {
      "matchFiles": [
        "^tools/frankphp/manifest.yaml$"
      ],
      "commitMessageTopic": "frankphp"
    },
    {
      "matchFiles": [
        "^tools/freeze/manifest.yaml$"
      ],
      "commitMessageTopic": "freeze"
    },
    {
      "matchFiles": [
        "^tools/fregot/manifest.yaml$"
      ],
      "commitMessageTopic": "fregot"
    },
    {
      "matchFiles": [
        "^tools/furyctl/manifest.yaml$"
      ],
      "commitMessageTopic": "furyctl"
    },
    {
      "matchFiles": [
        "^tools/fuse-overlayfs/manifest.yaml$"
      ],
      "commitMessageTopic": "fuse-overlayfs"
    },
    {
      "matchFiles": [
        "^tools/fuse-overlayfs-snapshotter/manifest.yaml$"
      ],
      "commitMessageTopic": "fuse-overlayfs-snapshotter"
    },
    {
      "matchFiles": [
        "^tools/fx/manifest.yaml$"
      ],
      "commitMessageTopic": "fx"
    },
    {
      "matchFiles": [
        "^tools/fzf/manifest.yaml$"
      ],
      "commitMessageTopic": "fzf"
    },
    {
      "matchFiles": [
        "^tools/gatekeeper/manifest.yaml$"
      ],
      "commitMessageTopic": "gatekeeper"
    },
    {
      "matchFiles": [
        "^tools/gcloud/manifest.yaml$"
      ],
      "commitMessageTopic": "gcloud"
    },
    {
      "matchFiles": [
        "^tools/geist-font/manifest.yaml$"
      ],
      "commitMessageTopic": "geist-font"
    },
    {
      "matchFiles": [
        "^tools/genie/manifest.yaml$"
      ],
      "commitMessageTopic": "genie"
    },
    {
      "matchFiles": [
        "^tools/geyser/manifest.yaml$"
      ],
      "commitMessageTopic": "geyser"
    },
    {
      "matchFiles": [
        "^tools/gh/manifest.yaml$"
      ],
      "commitMessageTopic": "gh"
    },
    {
      "matchFiles": [
        "^tools/gh-copilot/manifest.yaml$"
      ],
      "commitMessageTopic": "gh-copilot"
    },
    {
      "matchFiles": [
        "^tools/ghostunnel/manifest.yaml$"
      ],
      "commitMessageTopic": "ghostunnel"
    },
    {
      "matchFiles": [
        "^tools/git/manifest.yaml$"
      ],
      "commitMessageTopic": "git"
    },
    {
      "matchFiles": [
        "^tools/gita/manifest.yaml$"
      ],
      "commitMessageTopic": "gita"
    },
    {
      "matchFiles": [
        "^tools/git-credential-gopass/manifest.yaml$"
      ],
      "commitMessageTopic": "git-credential-gopass"
    },
    {
      "matchFiles": [
        "^tools/git-credential-oauth/manifest.yaml$"
      ],
      "commitMessageTopic": "git-credential-oauth"
    },
    {
      "matchFiles": [
        "^tools/gitea/manifest.yaml$"
      ],
      "commitMessageTopic": "gitea"
    },
    {
      "matchFiles": [
        "^tools/git-filter-repo/manifest.yaml$"
      ],
      "commitMessageTopic": "git-filter-repo"
    },
    {
      "matchFiles": [
        "^tools/git-graph/manifest.yaml$"
      ],
      "commitMessageTopic": "git-graph"
    },
    {
      "matchFiles": [
        "^tools/git-igitt/manifest.yaml$"
      ],
      "commitMessageTopic": "git-igitt"
    },
    {
      "matchFiles": [
        "^tools/gitjob/manifest.yaml$"
      ],
      "commitMessageTopic": "gitjob"
    },
    {
      "matchFiles": [
        "^tools/gitlabci-local/manifest.yaml$"
      ],
      "commitMessageTopic": "gitlabci-local"
    },
    {
      "matchFiles": [
        "^tools/gitlab-ci-pipelines-exporter/manifest.yaml$"
      ],
      "commitMessageTopic": "gitlab-ci-pipelines-exporter"
    },
    {
      "matchFiles": [
        "^tools/gitlab-release/manifest.yaml$"
      ],
      "commitMessageTopic": "gitlab-release"
    },
    {
      "matchFiles": [
        "^tools/gitlab-runner/manifest.yaml$"
      ],
      "commitMessageTopic": "gitlab-runner"
    },
    {
      "matchFiles": [
        "^tools/gitleaks/manifest.yaml$"
      ],
      "commitMessageTopic": "gitleaks"
    },
    {
      "matchFiles": [
        "^tools/git-lfs/manifest.yaml$"
      ],
      "commitMessageTopic": "git-lfs"
    },
    {
      "matchFiles": [
        "^tools/gitoxide/manifest.yaml$"
      ],
      "commitMessageTopic": "gitoxide"
    },
    {
      "matchFiles": [
        "^tools/gitsign/manifest.yaml$"
      ],
      "commitMessageTopic": "gitsign"
    },
    {
      "matchFiles": [
        "^tools/gittuf/manifest.yaml$"
      ],
      "commitMessageTopic": "gittuf"
    },
    {
      "matchFiles": [
        "^tools/gitui/manifest.yaml$"
      ],
      "commitMessageTopic": "gitui"
    },
    {
      "matchFiles": [
        "^tools/glab/manifest.yaml$"
      ],
      "commitMessageTopic": "glab"
    },
    {
      "matchFiles": [
        "^tools/glow/manifest.yaml$"
      ],
      "commitMessageTopic": "glow"
    },
    {
      "matchFiles": [
        "^tools/gnuplot/manifest.yaml$"
      ],
      "commitMessageTopic": "gnuplot"
    },
    {
      "matchFiles": [
        "^tools/go/manifest.yaml$"
      ],
      "commitMessageTopic": "go"
    },
    {
      "matchFiles": [
        "^tools/goblin/manifest.yaml$"
      ],
      "commitMessageTopic": "goblin"
    },
    {
      "matchFiles": [
        "^tools/gobump/manifest.yaml$"
      ],
      "commitMessageTopic": "gobump"
    },
    {
      "matchFiles": [
        "^tools/gocryptfs/manifest.yaml$"
      ],
      "commitMessageTopic": "gocryptfs"
    },
    {
      "matchFiles": [
        "^tools/godotenv/manifest.yaml$"
      ],
      "commitMessageTopic": "godotenv"
    },
    {
      "matchFiles": [
        "^tools/gojq/manifest.yaml$"
      ],
      "commitMessageTopic": "gojq"
    },
    {
      "matchFiles": [
        "^tools/golangci-lint/manifest.yaml$"
      ],
      "commitMessageTopic": "golangci-lint"
    },
    {
      "matchFiles": [
        "^tools/go-md2man/manifest.yaml$"
      ],
      "commitMessageTopic": "go-md2man"
    },
    {
      "matchFiles": [
        "^tools/go-modiff/manifest.yaml$"
      ],
      "commitMessageTopic": "go-modiff"
    },
    {
      "matchFiles": [
        "^tools/go-mod-upgrade/manifest.yaml$"
      ],
      "commitMessageTopic": "go-mod-upgrade"
    },
    {
      "matchFiles": [
        "^tools/gomplate/manifest.yaml$"
      ],
      "commitMessageTopic": "gomplate"
    },
    {
      "matchFiles": [
        "^tools/gopass/manifest.yaml$"
      ],
      "commitMessageTopic": "gopass"
    },
    {
      "matchFiles": [
        "^tools/goreleaser/manifest.yaml$"
      ],
      "commitMessageTopic": "goreleaser"
    },
    {
      "matchFiles": [
        "^tools/gosec/manifest.yaml$"
      ],
      "commitMessageTopic": "gosec"
    },
    {
      "matchFiles": [
        "^tools/gosu/manifest.yaml$"
      ],
      "commitMessageTopic": "gosu"
    },
    {
      "matchFiles": [
        "^tools/gotestsum/manifest.yaml$"
      ],
      "commitMessageTopic": "gotestsum"
    },
    {
      "matchFiles": [
        "^tools/govc/manifest.yaml$"
      ],
      "commitMessageTopic": "govc"
    },
    {
      "matchFiles": [
        "^tools/gox/manifest.yaml$"
      ],
      "commitMessageTopic": "gox"
    },
    {
      "matchFiles": [
        "^tools/goyacc/manifest.yaml$"
      ],
      "commitMessageTopic": "goyacc"
    },
    {
      "matchFiles": [
        "^tools/gptscript/manifest.yaml$"
      ],
      "commitMessageTopic": "gptscript"
    },
    {
      "matchFiles": [
        "^tools/gradle/manifest.yaml$"
      ],
      "commitMessageTopic": "gradle"
    },
    {
      "matchFiles": [
        "^tools/grafana/manifest.yaml$"
      ],
      "commitMessageTopic": "grafana"
    },
    {
      "matchFiles": [
        "^tools/grafana-agent/manifest.yaml$"
      ],
      "commitMessageTopic": "grafana-agent"
    },
    {
      "matchFiles": [
        "^tools/graphviz/manifest.yaml$"
      ],
      "commitMessageTopic": "graphviz"
    },
    {
      "matchFiles": [
        "^tools/gron/manifest.yaml$"
      ],
      "commitMessageTopic": "gron"
    },
    {
      "matchFiles": [
        "^tools/grpcurl/manifest.yaml$"
      ],
      "commitMessageTopic": "grpcurl"
    },
    {
      "matchFiles": [
        "^tools/grr/manifest.yaml$"
      ],
      "commitMessageTopic": "grr"
    },
    {
      "matchFiles": [
        "^tools/grunt/manifest.yaml$"
      ],
      "commitMessageTopic": "grunt"
    },
    {
      "matchFiles": [
        "^tools/grype/manifest.yaml$"
      ],
      "commitMessageTopic": "grype"
    },
    {
      "matchFiles": [
        "^tools/gsutil/manifest.yaml$"
      ],
      "commitMessageTopic": "gsutil"
    },
    {
      "matchFiles": [
        "^tools/guac/manifest.yaml$"
      ],
      "commitMessageTopic": "guac"
    },
    {
      "matchFiles": [
        "^tools/gum/manifest.yaml$"
      ],
      "commitMessageTopic": "gum"
    },
    {
      "matchFiles": [
        "^tools/gvisor/manifest.yaml$"
      ],
      "commitMessageTopic": "gvisor"
    },
    {
      "matchFiles": [
        "^tools/hadolint/manifest.yaml$"
      ],
      "commitMessageTopic": "hadolint"
    },
    {
      "matchFiles": [
        "^tools/has/manifest.yaml$"
      ],
      "commitMessageTopic": "has"
    },
    {
      "matchFiles": [
        "^tools/havener/manifest.yaml$"
      ],
      "commitMessageTopic": "havener"
    },
    {
      "matchFiles": [
        "^tools/hcloud/manifest.yaml$"
      ],
      "commitMessageTopic": "hcloud"
    },
    {
      "matchFiles": [
        "^tools/helm/manifest.yaml$"
      ],
      "commitMessageTopic": "helm"
    },
    {
      "matchFiles": [
        "^tools/helmfile/manifest.yaml$"
      ],
      "commitMessageTopic": "helmfile"
    },
    {
      "matchFiles": [
        "^tools/helmify/manifest.yaml$"
      ],
      "commitMessageTopic": "helmify"
    },
    {
      "matchFiles": [
        "^tools/hetzner-k3s/manifest.yaml$"
      ],
      "commitMessageTopic": "hetzner-k3s"
    },
    {
      "matchFiles": [
        "^tools/hexyl/manifest.yaml$"
      ],
      "commitMessageTopic": "hexyl"
    },
    {
      "matchFiles": [
        "^tools/hishtory/manifest.yaml$"
      ],
      "commitMessageTopic": "hishtory"
    },
    {
      "matchFiles": [
        "^tools/holmesgpt/manifest.yaml$"
      ],
      "commitMessageTopic": "holmesgpt"
    },
    {
      "matchFiles": [
        "^tools/hopp/manifest.yaml$"
      ],
      "commitMessageTopic": "hopp"
    },
    {
      "matchFiles": [
        "^tools/ht/manifest.yaml$"
      ],
      "commitMessageTopic": "ht"
    },
    {
      "matchFiles": [
        "^tools/htmx/manifest.yaml$"
      ],
      "commitMessageTopic": "htmx"
    },
    {
      "matchFiles": [
        "^tools/httpie/manifest.yaml$"
      ],
      "commitMessageTopic": "httpie"
    },
    {
      "matchFiles": [
        "^tools/httpx/manifest.yaml$"
      ],
      "commitMessageTopic": "httpx"
    },
    {
      "matchFiles": [
        "^tools/hub/manifest.yaml$"
      ],
      "commitMessageTopic": "hub"
    },
    {
      "matchFiles": [
        "^tools/hubble/manifest.yaml$"
      ],
      "commitMessageTopic": "hubble"
    },
    {
      "matchFiles": [
        "^tools/huber/manifest.yaml$"
      ],
      "commitMessageTopic": "huber"
    },
    {
      "matchFiles": [
        "^tools/hub-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "hub-tool"
    },
    {
      "matchFiles": [
        "^tools/hugo/manifest.yaml$"
      ],
      "commitMessageTopic": "hugo"
    },
    {
      "matchFiles": [
        "^tools/hurl/manifest.yaml$"
      ],
      "commitMessageTopic": "hurl"
    },
    {
      "matchFiles": [
        "^tools/hyperfine/manifest.yaml$"
      ],
      "commitMessageTopic": "hyperfine"
    },
    {
      "matchFiles": [
        "^tools/ignite/manifest.yaml$"
      ],
      "commitMessageTopic": "ignite"
    },
    {
      "matchFiles": [
        "^tools/img/manifest.yaml$"
      ],
      "commitMessageTopic": "img"
    },
    {
      "matchFiles": [
        "^tools/imgcrypt/manifest.yaml$"
      ],
      "commitMessageTopic": "imgcrypt"
    },
    {
      "matchFiles": [
        "^tools/imgpkg/manifest.yaml$"
      ],
      "commitMessageTopic": "imgpkg"
    },
    {
      "matchFiles": [
        "^tools/incus/manifest.yaml$"
      ],
      "commitMessageTopic": "incus"
    },
    {
      "matchFiles": [
        "^tools/influx-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "influx-cli"
    },
    {
      "matchFiles": [
        "^tools/influxdb/manifest.yaml$"
      ],
      "commitMessageTopic": "influxdb"
    },
    {
      "matchFiles": [
        "^tools/ingress2gateway/manifest.yaml$"
      ],
      "commitMessageTopic": "ingress2gateway"
    },
    {
      "matchFiles": [
        "^tools/inotify-tools/manifest.yaml$"
      ],
      "commitMessageTopic": "inotify-tools"
    },
    {
      "matchFiles": [
        "^tools/inshellisense/manifest.yaml$"
      ],
      "commitMessageTopic": "inshellisense"
    },
    {
      "matchFiles": [
        "^tools/in-toto/manifest.yaml$"
      ],
      "commitMessageTopic": "in-toto"
    },
    {
      "matchFiles": [
        "^tools/iptables/manifest.yaml$"
      ],
      "commitMessageTopic": "iptables"
    },
    {
      "matchFiles": [
        "^tools/it-depends/manifest.yaml$"
      ],
      "commitMessageTopic": "it-depends"
    },
    {
      "matchFiles": [
        "^tools/jabba/manifest.yaml$"
      ],
      "commitMessageTopic": "jabba"
    },
    {
      "matchFiles": [
        "^tools/jaq/manifest.yaml$"
      ],
      "commitMessageTopic": "jaq"
    },
    {
      "matchFiles": [
        "^tools/jaxb/manifest.yaml$"
      ],
      "commitMessageTopic": "jaxb"
    },
    {
      "matchFiles": [
        "^tools/jb/manifest.yaml$"
      ],
      "commitMessageTopic": "jb"
    },
    {
      "matchFiles": [
        "^tools/jc/manifest.yaml$"
      ],
      "commitMessageTopic": "jc"
    },
    {
      "matchFiles": [
        "^tools/jenkins-remoting/manifest.yaml$"
      ],
      "commitMessageTopic": "jenkins-remoting"
    },
    {
      "matchFiles": [
        "^tools/jetbrainsmono/manifest.yaml$"
      ],
      "commitMessageTopic": "jetbrainsmono"
    },
    {
      "matchFiles": [
        "^tools/jf/manifest.yaml$"
      ],
      "commitMessageTopic": "jf"
    },
    {
      "matchFiles": [
        "^tools/jfq/manifest.yaml$"
      ],
      "commitMessageTopic": "jfq"
    },
    {
      "matchFiles": [
        "^tools/jj/manifest.yaml$"
      ],
      "commitMessageTopic": "jj"
    },
    {
      "matchFiles": [
        "^tools/jless/manifest.yaml$"
      ],
      "commitMessageTopic": "jless"
    },
    {
      "matchFiles": [
        "^tools/jnv/manifest.yaml$"
      ],
      "commitMessageTopic": "jnv"
    },
    {
      "matchFiles": [
        "^tools/jp/manifest.yaml$"
      ],
      "commitMessageTopic": "jp"
    },
    {
      "matchFiles": [
        "^tools/jq/manifest.yaml$"
      ],
      "commitMessageTopic": "jq"
    },
    {
      "matchFiles": [
        "^tools/jqp/manifest.yaml$"
      ],
      "commitMessageTopic": "jqp"
    },
    {
      "matchFiles": [
        "^tools/jsonata-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "jsonata-cli"
    },
    {
      "matchFiles": [
        "^tools/json-exporter/manifest.yaml$"
      ],
      "commitMessageTopic": "json-exporter"
    },
    {
      "matchFiles": [
        "^tools/jsonnet/manifest.yaml$"
      ],
      "commitMessageTopic": "jsonnet"
    },
    {
      "matchFiles": [
        "^tools/jsonplot/manifest.yaml$"
      ],
      "commitMessageTopic": "jsonplot"
    },
    {
      "matchFiles": [
        "^tools/just/manifest.yaml$"
      ],
      "commitMessageTopic": "just"
    },
    {
      "matchFiles": [
        "^tools/jwt/manifest.yaml$"
      ],
      "commitMessageTopic": "jwt"
    },
    {
      "matchFiles": [
        "^tools/jx/manifest.yaml$"
      ],
      "commitMessageTopic": "jx"
    },
    {
      "matchFiles": [
        "^tools/k0s/manifest.yaml$"
      ],
      "commitMessageTopic": "k0s"
    },
    {
      "matchFiles": [
        "^tools/k0sctl/manifest.yaml$"
      ],
      "commitMessageTopic": "k0sctl"
    },
    {
      "matchFiles": [
        "^tools/k2d/manifest.yaml$"
      ],
      "commitMessageTopic": "k2d"
    },
    {
      "matchFiles": [
        "^tools/k3d/manifest.yaml$"
      ],
      "commitMessageTopic": "k3d"
    },
    {
      "matchFiles": [
        "^tools/k3s/manifest.yaml$"
      ],
      "commitMessageTopic": "k3s"
    },
    {
      "matchFiles": [
        "^tools/k3sup/manifest.yaml$"
      ],
      "commitMessageTopic": "k3sup"
    },
    {
      "matchFiles": [
        "^tools/k6/manifest.yaml$"
      ],
      "commitMessageTopic": "k6"
    },
    {
      "matchFiles": [
        "^tools/k8senv/manifest.yaml$"
      ],
      "commitMessageTopic": "k8senv"
    },
    {
      "matchFiles": [
        "^tools/k8sgpt/manifest.yaml$"
      ],
      "commitMessageTopic": "k8sgpt"
    },
    {
      "matchFiles": [
        "^tools/k8spacket/manifest.yaml$"
      ],
      "commitMessageTopic": "k8spacket"
    },
    {
      "matchFiles": [
        "^tools/k8s-tew/manifest.yaml$"
      ],
      "commitMessageTopic": "k8s-tew"
    },
    {
      "matchFiles": [
        "^tools/k9s/manifest.yaml$"
      ],
      "commitMessageTopic": "k9s"
    },
    {
      "matchFiles": [
        "^tools/kapp/manifest.yaml$"
      ],
      "commitMessageTopic": "kapp"
    },
    {
      "matchFiles": [
        "^tools/katana/manifest.yaml$"
      ],
      "commitMessageTopic": "katana"
    },
    {
      "matchFiles": [
        "^tools/kbld/manifest.yaml$"
      ],
      "commitMessageTopic": "kbld"
    },
    {
      "matchFiles": [
        "^tools/kbom/manifest.yaml$"
      ],
      "commitMessageTopic": "kbom"
    },
    {
      "matchFiles": [
        "^tools/kbrew/manifest.yaml$"
      ],
      "commitMessageTopic": "kbrew"
    },
    {
      "matchFiles": [
        "^tools/kcount/manifest.yaml$"
      ],
      "commitMessageTopic": "kcount"
    },
    {
      "matchFiles": [
        "^tools/kcp/manifest.yaml$"
      ],
      "commitMessageTopic": "kcp"
    },
    {
      "matchFiles": [
        "^tools/kd/manifest.yaml$"
      ],
      "commitMessageTopic": "kd"
    },
    {
      "matchFiles": [
        "^tools/kdo/manifest.yaml$"
      ],
      "commitMessageTopic": "kdo"
    },
    {
      "matchFiles": [
        "^tools/ketch/manifest.yaml$"
      ],
      "commitMessageTopic": "ketch"
    },
    {
      "matchFiles": [
        "^tools/kexp/manifest.yaml$"
      ],
      "commitMessageTopic": "kexp"
    },
    {
      "matchFiles": [
        "^tools/keybase/manifest.yaml$"
      ],
      "commitMessageTopic": "keybase"
    },
    {
      "matchFiles": [
        "^tools/keyoxide/manifest.yaml$"
      ],
      "commitMessageTopic": "keyoxide"
    },
    {
      "matchFiles": [
        "^tools/kgctl/manifest.yaml$"
      ],
      "commitMessageTopic": "kgctl"
    },
    {
      "matchFiles": [
        "^tools/kind/manifest.yaml$"
      ],
      "commitMessageTopic": "kind"
    },
    {
      "matchFiles": [
        "^tools/kine/manifest.yaml$"
      ],
      "commitMessageTopic": "kine"
    },
    {
      "matchFiles": [
        "^tools/kink/manifest.yaml$"
      ],
      "commitMessageTopic": "kink"
    },
    {
      "matchFiles": [
        "^tools/kitt/manifest.yaml$"
      ],
      "commitMessageTopic": "kitt"
    },
    {
      "matchFiles": [
        "^tools/kitty/manifest.yaml$"
      ],
      "commitMessageTopic": "kitty"
    },
    {
      "matchFiles": [
        "^tools/kluctl/manifest.yaml$"
      ],
      "commitMessageTopic": "kluctl"
    },
    {
      "matchFiles": [
        "^tools/kmon/manifest.yaml$"
      ],
      "commitMessageTopic": "kmon"
    },
    {
      "matchFiles": [
        "^tools/kn/manifest.yaml$"
      ],
      "commitMessageTopic": "kn"
    },
    {
      "matchFiles": [
        "^tools/ko/manifest.yaml$"
      ],
      "commitMessageTopic": "ko"
    },
    {
      "matchFiles": [
        "^tools/kompose/manifest.yaml$"
      ],
      "commitMessageTopic": "kompose"
    },
    {
      "matchFiles": [
        "^tools/konf/manifest.yaml$"
      ],
      "commitMessageTopic": "konf"
    },
    {
      "matchFiles": [
        "^tools/kots/manifest.yaml$"
      ],
      "commitMessageTopic": "kots"
    },
    {
      "matchFiles": [
        "^tools/kp/manifest.yaml$"
      ],
      "commitMessageTopic": "kp"
    },
    {
      "matchFiles": [
        "^tools/kpt/manifest.yaml$"
      ],
      "commitMessageTopic": "kpt"
    },
    {
      "matchFiles": [
        "^tools/kpxhs/manifest.yaml$"
      ],
      "commitMessageTopic": "kpxhs"
    },
    {
      "matchFiles": [
        "^tools/krew/manifest.yaml$"
      ],
      "commitMessageTopic": "krew"
    },
    {
      "matchFiles": [
        "^tools/kroki-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "kroki-cli"
    },
    {
      "matchFiles": [
        "^tools/ksort/manifest.yaml$"
      ],
      "commitMessageTopic": "ksort"
    },
    {
      "matchFiles": [
        "^tools/ktop/manifest.yaml$"
      ],
      "commitMessageTopic": "ktop"
    },
    {
      "matchFiles": [
        "^tools/ktunnel/manifest.yaml$"
      ],
      "commitMessageTopic": "ktunnel"
    },
    {
      "matchFiles": [
        "^tools/kubeadm/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeadm"
    },
    {
      "matchFiles": [
        "^tools/kube-apiserver/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-apiserver"
    },
    {
      "matchFiles": [
        "^tools/kubeaudit/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeaudit"
    },
    {
      "matchFiles": [
        "^tools/kube-bench/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-bench"
    },
    {
      "matchFiles": [
        "^tools/kubebox/manifest.yaml$"
      ],
      "commitMessageTopic": "kubebox"
    },
    {
      "matchFiles": [
        "^tools/kubebuilder/manifest.yaml$"
      ],
      "commitMessageTopic": "kubebuilder"
    },
    {
      "matchFiles": [
        "^tools/kube-burner/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-burner"
    },
    {
      "matchFiles": [
        "^tools/kubeclarity-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeclarity-cli"
    },
    {
      "matchFiles": [
        "^tools/kubecolor/manifest.yaml$"
      ],
      "commitMessageTopic": "kubecolor"
    },
    {
      "matchFiles": [
        "^tools/kubeconform/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeconform"
    },
    {
      "matchFiles": [
        "^tools/kube-controller-manager/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-controller-manager"
    },
    {
      "matchFiles": [
        "^tools/kubectl/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl"
    },
    {
      "matchFiles": [
        "^tools/kubectl-build/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl-build"
    },
    {
      "matchFiles": [
        "^tools/kubectl-free/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl-free"
    },
    {
      "matchFiles": [
        "^tools/kubectl-oidc-login/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl-oidc-login"
    },
    {
      "matchFiles": [
        "^tools/kubectl-resources/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl-resources"
    },
    {
      "matchFiles": [
        "^tools/kubectl-ssh-proxy/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectl-ssh-proxy"
    },
    {
      "matchFiles": [
        "^tools/kubectx/manifest.yaml$"
      ],
      "commitMessageTopic": "kubectx"
    },
    {
      "matchFiles": [
        "^tools/kubefire/manifest.yaml$"
      ],
      "commitMessageTopic": "kubefire"
    },
    {
      "matchFiles": [
        "^tools/kubelet/manifest.yaml$"
      ],
      "commitMessageTopic": "kubelet"
    },
    {
      "matchFiles": [
        "^tools/kubeletctl/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeletctl"
    },
    {
      "matchFiles": [
        "^tools/kube-linter/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-linter"
    },
    {
      "matchFiles": [
        "^tools/kubent/manifest.yaml$"
      ],
      "commitMessageTopic": "kubent"
    },
    {
      "matchFiles": [
        "^tools/kube-proxy/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-proxy"
    },
    {
      "matchFiles": [
        "^tools/kube-psp-advisor/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-psp-advisor"
    },
    {
      "matchFiles": [
        "^tools/kubernetes-json-schema/manifest.yaml$"
      ],
      "commitMessageTopic": "kubernetes-json-schema"
    },
    {
      "matchFiles": [
        "^tools/kubescape/manifest.yaml$"
      ],
      "commitMessageTopic": "kubescape"
    },
    {
      "matchFiles": [
        "^tools/kube-scheduler/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-scheduler"
    },
    {
      "matchFiles": [
        "^tools/kube-score/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-score"
    },
    {
      "matchFiles": [
        "^tools/kubeseal/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeseal"
    },
    {
      "matchFiles": [
        "^tools/kubesec/manifest.yaml$"
      ],
      "commitMessageTopic": "kubesec"
    },
    {
      "matchFiles": [
        "^tools/kubeshark/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeshark"
    },
    {
      "matchFiles": [
        "^tools/kubeswitch/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeswitch"
    },
    {
      "matchFiles": [
        "^tools/kube-trigger/manifest.yaml$"
      ],
      "commitMessageTopic": "kube-trigger"
    },
    {
      "matchFiles": [
        "^tools/kubeval/manifest.yaml$"
      ],
      "commitMessageTopic": "kubeval"
    },
    {
      "matchFiles": [
        "^tools/kubo/manifest.yaml$"
      ],
      "commitMessageTopic": "kubo"
    },
    {
      "matchFiles": [
        "^tools/kudo/manifest.yaml$"
      ],
      "commitMessageTopic": "kudo"
    },
    {
      "matchFiles": [
        "^tools/kustomize/manifest.yaml$"
      ],
      "commitMessageTopic": "kustomize"
    },
    {
      "matchFiles": [
        "^tools/kustomizer/manifest.yaml$"
      ],
      "commitMessageTopic": "kustomizer"
    },
    {
      "matchFiles": [
        "^tools/kuttl/manifest.yaml$"
      ],
      "commitMessageTopic": "kuttl"
    },
    {
      "matchFiles": [
        "^tools/kwok/manifest.yaml$"
      ],
      "commitMessageTopic": "kwok"
    },
    {
      "matchFiles": [
        "^tools/kyverno/manifest.yaml$"
      ],
      "commitMessageTopic": "kyverno"
    },
    {
      "matchFiles": [
        "^tools/lab/manifest.yaml$"
      ],
      "commitMessageTopic": "lab"
    },
    {
      "matchFiles": [
        "^tools/lazydocker/manifest.yaml$"
      ],
      "commitMessageTopic": "lazydocker"
    },
    {
      "matchFiles": [
        "^tools/lazygit/manifest.yaml$"
      ],
      "commitMessageTopic": "lazygit"
    },
    {
      "matchFiles": [
        "^tools/lazysql/manifest.yaml$"
      ],
      "commitMessageTopic": "lazysql"
    },
    {
      "matchFiles": [
        "^tools/lazytrivy/manifest.yaml$"
      ],
      "commitMessageTopic": "lazytrivy"
    },
    {
      "matchFiles": [
        "^tools/lectl/manifest.yaml$"
      ],
      "commitMessageTopic": "lectl"
    },
    {
      "matchFiles": [
        "^tools/lego/manifest.yaml$"
      ],
      "commitMessageTopic": "lego"
    },
    {
      "matchFiles": [
        "^tools/libbpf/manifest.yaml$"
      ],
      "commitMessageTopic": "libbpf"
    },
    {
      "matchFiles": [
        "^tools/libcap/manifest.yaml$"
      ],
      "commitMessageTopic": "libcap"
    },
    {
      "matchFiles": [
        "^tools/libcap-ng/manifest.yaml$"
      ],
      "commitMessageTopic": "libcap-ng"
    },
    {
      "matchFiles": [
        "^tools/libcgroup/manifest.yaml$"
      ],
      "commitMessageTopic": "libcgroup"
    },
    {
      "matchFiles": [
        "^tools/libgmp/manifest.yaml$"
      ],
      "commitMessageTopic": "libgmp"
    },
    {
      "matchFiles": [
        "^tools/libjansson/manifest.yaml$"
      ],
      "commitMessageTopic": "libjansson"
    },
    {
      "matchFiles": [
        "^tools/libmnl/manifest.yaml$"
      ],
      "commitMessageTopic": "libmnl"
    },
    {
      "matchFiles": [
        "^tools/libnfnetlink/manifest.yaml$"
      ],
      "commitMessageTopic": "libnfnetlink"
    },
    {
      "matchFiles": [
        "^tools/libnftnl/manifest.yaml$"
      ],
      "commitMessageTopic": "libnftnl"
    },
    {
      "matchFiles": [
        "^tools/libnvidia-container/manifest.yaml$"
      ],
      "commitMessageTopic": "libnvidia-container"
    },
    {
      "matchFiles": [
        "^tools/lima/manifest.yaml$"
      ],
      "commitMessageTopic": "lima"
    },
    {
      "matchFiles": [
        "^tools/linkchecker/manifest.yaml$"
      ],
      "commitMessageTopic": "linkchecker"
    },
    {
      "matchFiles": [
        "^tools/linux-kernel/manifest.yaml$"
      ],
      "commitMessageTopic": "linux-kernel"
    },
    {
      "matchFiles": [
        "^tools/linux-kernel-wsl/manifest.yaml$"
      ],
      "commitMessageTopic": "linux-kernel-wsl"
    },
    {
      "matchFiles": [
        "^tools/linux-kernel-wsl-stable/manifest.yaml$"
      ],
      "commitMessageTopic": "linux-kernel-wsl-stable"
    },
    {
      "matchFiles": [
        "^tools/linuxkit/manifest.yaml$"
      ],
      "commitMessageTopic": "linuxkit"
    },
    {
      "matchFiles": [
        "^tools/local-ai/manifest.yaml$"
      ],
      "commitMessageTopic": "local-ai"
    },
    {
      "matchFiles": [
        "^tools/localizer/manifest.yaml$"
      ],
      "commitMessageTopic": "localizer"
    },
    {
      "matchFiles": [
        "^tools/loft/manifest.yaml$"
      ],
      "commitMessageTopic": "loft"
    },
    {
      "matchFiles": [
        "^tools/logcli/manifest.yaml$"
      ],
      "commitMessageTopic": "logcli"
    },
    {
      "matchFiles": [
        "^tools/loki/manifest.yaml$"
      ],
      "commitMessageTopic": "loki"
    },
    {
      "matchFiles": [
        "^tools/loki-canary/manifest.yaml$"
      ],
      "commitMessageTopic": "loki-canary"
    },
    {
      "matchFiles": [
        "^tools/lowcharts/manifest.yaml$"
      ],
      "commitMessageTopic": "lowcharts"
    },
    {
      "matchFiles": [
        "^tools/lsd/manifest.yaml$"
      ],
      "commitMessageTopic": "lsd"
    },
    {
      "matchFiles": [
        "^tools/lstags/manifest.yaml$"
      ],
      "commitMessageTopic": "lstags"
    },
    {
      "matchFiles": [
        "^tools/luet/manifest.yaml$"
      ],
      "commitMessageTopic": "luet"
    },
    {
      "matchFiles": [
        "^tools/lxroot/manifest.yaml$"
      ],
      "commitMessageTopic": "lxroot"
    },
    {
      "matchFiles": [
        "^tools/lz4/manifest.yaml$"
      ],
      "commitMessageTopic": "lz4"
    },
    {
      "matchFiles": [
        "^tools/mage/manifest.yaml$"
      ],
      "commitMessageTopic": "mage"
    },
    {
      "matchFiles": [
        "^tools/mailpit/manifest.yaml$"
      ],
      "commitMessageTopic": "mailpit"
    },
    {
      "matchFiles": [
        "^tools/make/manifest.yaml$"
      ],
      "commitMessageTopic": "make"
    },
    {
      "matchFiles": [
        "^tools/mani/manifest.yaml$"
      ],
      "commitMessageTopic": "mani"
    },
    {
      "matchFiles": [
        "^tools/manifest-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "manifest-tool"
    },
    {
      "matchFiles": [
        "^tools/mapcidr/manifest.yaml$"
      ],
      "commitMessageTopic": "mapcidr"
    },
    {
      "matchFiles": [
        "^tools/markdownlint/manifest.yaml$"
      ],
      "commitMessageTopic": "markdownlint"
    },
    {
      "matchFiles": [
        "^tools/marvin/manifest.yaml$"
      ],
      "commitMessageTopic": "marvin"
    },
    {
      "matchFiles": [
        "^tools/maven/manifest.yaml$"
      ],
      "commitMessageTopic": "maven"
    },
    {
      "matchFiles": [
        "^tools/mc/manifest.yaml$"
      ],
      "commitMessageTopic": "mc"
    },
    {
      "matchFiles": [
        "^tools/mcfly/manifest.yaml$"
      ],
      "commitMessageTopic": "mcfly"
    },
    {
      "matchFiles": [
        "^tools/mcrcon/manifest.yaml$"
      ],
      "commitMessageTopic": "mcrcon"
    },
    {
      "matchFiles": [
        "^tools/melange/manifest.yaml$"
      ],
      "commitMessageTopic": "melange"
    },
    {
      "matchFiles": [
        "^tools/melt/manifest.yaml$"
      ],
      "commitMessageTopic": "melt"
    },
    {
      "matchFiles": [
        "^tools/mergerfs/manifest.yaml$"
      ],
      "commitMessageTopic": "mergerfs"
    },
    {
      "matchFiles": [
        "^tools/mermaid-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "mermaid-cli"
    },
    {
      "matchFiles": [
        "^tools/meteor/manifest.yaml$"
      ],
      "commitMessageTopic": "meteor"
    },
    {
      "matchFiles": [
        "^tools/meteor-commit/manifest.yaml$"
      ],
      "commitMessageTopic": "meteor-commit"
    },
    {
      "matchFiles": [
        "^tools/mgo/manifest.yaml$"
      ],
      "commitMessageTopic": "mgo"
    },
    {
      "matchFiles": [
        "^tools/micro/manifest.yaml$"
      ],
      "commitMessageTopic": "micro"
    },
    {
      "matchFiles": [
        "^tools/miller/manifest.yaml$"
      ],
      "commitMessageTopic": "miller"
    },
    {
      "matchFiles": [
        "^tools/mimir/manifest.yaml$"
      ],
      "commitMessageTopic": "mimir"
    },
    {
      "matchFiles": [
        "^tools/mimirtool/manifest.yaml$"
      ],
      "commitMessageTopic": "mimirtool"
    },
    {
      "matchFiles": [
        "^tools/minder/manifest.yaml$"
      ],
      "commitMessageTopic": "minder"
    },
    {
      "matchFiles": [
        "^tools/minecraft-server/manifest.yaml$"
      ],
      "commitMessageTopic": "minecraft-server"
    },
    {
      "matchFiles": [
        "^tools/minectl/manifest.yaml$"
      ],
      "commitMessageTopic": "minectl"
    },
    {
      "matchFiles": [
        "^tools/minikube/manifest.yaml$"
      ],
      "commitMessageTopic": "minikube"
    },
    {
      "matchFiles": [
        "^tools/minio/manifest.yaml$"
      ],
      "commitMessageTopic": "minio"
    },
    {
      "matchFiles": [
        "^tools/mink/manifest.yaml$"
      ],
      "commitMessageTopic": "mink"
    },
    {
      "matchFiles": [
        "^tools/mint/manifest.yaml$"
      ],
      "commitMessageTopic": "mint"
    },
    {
      "matchFiles": [
        "^tools/mitmproxy/manifest.yaml$"
      ],
      "commitMessageTopic": "mitmproxy"
    },
    {
      "matchFiles": [
        "^tools/mkcert/manifest.yaml$"
      ],
      "commitMessageTopic": "mkcert"
    },
    {
      "matchFiles": [
        "^tools/mkdocs/manifest.yaml$"
      ],
      "commitMessageTopic": "mkdocs"
    },
    {
      "matchFiles": [
        "^tools/mods/manifest.yaml$"
      ],
      "commitMessageTopic": "mods"
    },
    {
      "matchFiles": [
        "^tools/monaspace/manifest.yaml$"
      ],
      "commitMessageTopic": "monaspace"
    },
    {
      "matchFiles": [
        "^tools/mp3binder/manifest.yaml$"
      ],
      "commitMessageTopic": "mp3binder"
    },
    {
      "matchFiles": [
        "^tools/multiverse/manifest.yaml$"
      ],
      "commitMessageTopic": "multiverse"
    },
    {
      "matchFiles": [
        "^tools/multiverse-inventories/manifest.yaml$"
      ],
      "commitMessageTopic": "multiverse-inventories"
    },
    {
      "matchFiles": [
        "^tools/multiverse-netherportals/manifest.yaml$"
      ],
      "commitMessageTopic": "multiverse-netherportals"
    },
    {
      "matchFiles": [
        "^tools/multiverse-portals/manifest.yaml$"
      ],
      "commitMessageTopic": "multiverse-portals"
    },
    {
      "matchFiles": [
        "^tools/multiverse-signportals/manifest.yaml$"
      ],
      "commitMessageTopic": "multiverse-signportals"
    },
    {
      "matchFiles": [
        "^tools/mu-repo/manifest.yaml$"
      ],
      "commitMessageTopic": "mu-repo"
    },
    {
      "matchFiles": [
        "^tools/musl/manifest.yaml$"
      ],
      "commitMessageTopic": "musl"
    },
    {
      "matchFiles": [
        "^tools/mutagen/manifest.yaml$"
      ],
      "commitMessageTopic": "mutagen"
    },
    {
      "matchFiles": [
        "^tools/mutagen-compose/manifest.yaml$"
      ],
      "commitMessageTopic": "mutagen-compose"
    },
    {
      "matchFiles": [
        "^tools/n8n/manifest.yaml$"
      ],
      "commitMessageTopic": "n8n"
    },
    {
      "matchFiles": [
        "^tools/namespace/manifest.yaml$"
      ],
      "commitMessageTopic": "namespace"
    },
    {
      "matchFiles": [
        "^tools/nancy/manifest.yaml$"
      ],
      "commitMessageTopic": "nancy"
    },
    {
      "matchFiles": [
        "^tools/navi/manifest.yaml$"
      ],
      "commitMessageTopic": "navi"
    },
    {
      "matchFiles": [
        "^tools/ncdu/manifest.yaml$"
      ],
      "commitMessageTopic": "ncdu"
    },
    {
      "matchFiles": [
        "^tools/neo4j/manifest.yaml$"
      ],
      "commitMessageTopic": "neo4j"
    },
    {
      "matchFiles": [
        "^tools/neofetch/manifest.yaml$"
      ],
      "commitMessageTopic": "neofetch"
    },
    {
      "matchFiles": [
        "^tools/nerdctl/manifest.yaml$"
      ],
      "commitMessageTopic": "nerdctl"
    },
    {
      "matchFiles": [
        "^tools/nerd-fonts/manifest.yaml$"
      ],
      "commitMessageTopic": "nerd-fonts"
    },
    {
      "matchFiles": [
        "^tools/newman/manifest.yaml$"
      ],
      "commitMessageTopic": "newman"
    },
    {
      "matchFiles": [
        "^tools/nftables/manifest.yaml$"
      ],
      "commitMessageTopic": "nftables"
    },
    {
      "matchFiles": [
        "^tools/nms/manifest.yaml$"
      ],
      "commitMessageTopic": "nms"
    },
    {
      "matchFiles": [
        "^tools/node-exporter/manifest.yaml$"
      ],
      "commitMessageTopic": "node-exporter"
    },
    {
      "matchFiles": [
        "^tools/nodejs/manifest.yaml$"
      ],
      "commitMessageTopic": "nodejs"
    },
    {
      "matchFiles": [
        "^tools/nodejs-lts/manifest.yaml$"
      ],
      "commitMessageTopic": "nodejs-lts"
    },
    {
      "matchFiles": [
        "^tools/nomad/manifest.yaml$"
      ],
      "commitMessageTopic": "nomad"
    },
    {
      "matchFiles": [
        "^tools/norouter/manifest.yaml$"
      ],
      "commitMessageTopic": "norouter"
    },
    {
      "matchFiles": [
        "^tools/notation/manifest.yaml$"
      ],
      "commitMessageTopic": "notation"
    },
    {
      "matchFiles": [
        "^tools/npm/manifest.yaml$"
      ],
      "commitMessageTopic": "npm"
    },
    {
      "matchFiles": [
        "^tools/nsutils/manifest.yaml$"
      ],
      "commitMessageTopic": "nsutils"
    },
    {
      "matchFiles": [
        "^tools/nuclei/manifest.yaml$"
      ],
      "commitMessageTopic": "nuclei"
    },
    {
      "matchFiles": [
        "^tools/nuclei-templates/manifest.yaml$"
      ],
      "commitMessageTopic": "nuclei-templates"
    },
    {
      "matchFiles": [
        "^tools/nushell/manifest.yaml$"
      ],
      "commitMessageTopic": "nushell"
    },
    {
      "matchFiles": [
        "^tools/nvidia-container-toolkit/manifest.yaml$"
      ],
      "commitMessageTopic": "nvidia-container-toolkit"
    },
    {
      "matchFiles": [
        "^tools/nvm/manifest.yaml$"
      ],
      "commitMessageTopic": "nvm"
    },
    {
      "matchFiles": [
        "^tools/nx/manifest.yaml$"
      ],
      "commitMessageTopic": "nx"
    },
    {
      "matchFiles": [
        "^tools/nydus/manifest.yaml$"
      ],
      "commitMessageTopic": "nydus"
    },
    {
      "matchFiles": [
        "^tools/nydus-snapshotter/manifest.yaml$"
      ],
      "commitMessageTopic": "nydus-snapshotter"
    },
    {
      "matchFiles": [
        "^tools/oc/manifest.yaml$"
      ],
      "commitMessageTopic": "oc"
    },
    {
      "matchFiles": [
        "^tools/ocb/manifest.yaml$"
      ],
      "commitMessageTopic": "ocb"
    },
    {
      "matchFiles": [
        "^tools/oci-image-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "oci-image-tool"
    },
    {
      "matchFiles": [
        "^tools/oci-runtime-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "oci-runtime-tool"
    },
    {
      "matchFiles": [
        "^tools/ocm/manifest.yaml$"
      ],
      "commitMessageTopic": "ocm"
    },
    {
      "matchFiles": [
        "^tools/octopilot/manifest.yaml$"
      ],
      "commitMessageTopic": "octopilot"
    },
    {
      "matchFiles": [
        "^tools/octosql/manifest.yaml$"
      ],
      "commitMessageTopic": "octosql"
    },
    {
      "matchFiles": [
        "^tools/oidc/manifest.yaml$"
      ],
      "commitMessageTopic": "oidc"
    },
    {
      "matchFiles": [
        "^tools/oidc-claims/manifest.yaml$"
      ],
      "commitMessageTopic": "oidc-claims"
    },
    {
      "matchFiles": [
        "^tools/ojg/manifest.yaml$"
      ],
      "commitMessageTopic": "ojg"
    },
    {
      "matchFiles": [
        "^tools/opa/manifest.yaml$"
      ],
      "commitMessageTopic": "opa"
    },
    {
      "matchFiles": [
        "^tools/openhue-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "openhue-cli"
    },
    {
      "matchFiles": [
        "^tools/openjdk/manifest.yaml$"
      ],
      "commitMessageTopic": "openjdk"
    },
    {
      "matchFiles": [
        "^tools/openjdk-jre/manifest.yaml$"
      ],
      "commitMessageTopic": "openjdk-jre"
    },
    {
      "matchFiles": [
        "^tools/opentofu/manifest.yaml$"
      ],
      "commitMessageTopic": "opentofu"
    },
    {
      "matchFiles": [
        "^tools/oras/manifest.yaml$"
      ],
      "commitMessageTopic": "oras"
    },
    {
      "matchFiles": [
        "^tools/osquery/manifest.yaml$"
      ],
      "commitMessageTopic": "osquery"
    },
    {
      "matchFiles": [
        "^tools/osv-scanner/manifest.yaml$"
      ],
      "commitMessageTopic": "osv-scanner"
    },
    {
      "matchFiles": [
        "^tools/overlaybd/manifest.yaml$"
      ],
      "commitMessageTopic": "overlaybd"
    },
    {
      "matchFiles": [
        "^tools/overlaybd-snapshotter/manifest.yaml$"
      ],
      "commitMessageTopic": "overlaybd-snapshotter"
    },
    {
      "matchFiles": [
        "^tools/pack/manifest.yaml$"
      ],
      "commitMessageTopic": "pack"
    },
    {
      "matchFiles": [
        "^tools/packer/manifest.yaml$"
      ],
      "commitMessageTopic": "packer"
    },
    {
      "matchFiles": [
        "^tools/pacstall/manifest.yaml$"
      ],
      "commitMessageTopic": "pacstall"
    },
    {
      "matchFiles": [
        "^tools/pandoc/manifest.yaml$"
      ],
      "commitMessageTopic": "pandoc"
    },
    {
      "matchFiles": [
        "^tools/papermc/manifest.yaml$"
      ],
      "commitMessageTopic": "papermc"
    },
    {
      "matchFiles": [
        "^tools/paranoia/manifest.yaml$"
      ],
      "commitMessageTopic": "paranoia"
    },
    {
      "matchFiles": [
        "^tools/parca/manifest.yaml$"
      ],
      "commitMessageTopic": "parca"
    },
    {
      "matchFiles": [
        "^tools/parca-agent/manifest.yaml$"
      ],
      "commitMessageTopic": "parca-agent"
    },
    {
      "matchFiles": [
        "^tools/pass/manifest.yaml$"
      ],
      "commitMessageTopic": "pass"
    },
    {
      "matchFiles": [
        "^tools/passage/manifest.yaml$"
      ],
      "commitMessageTopic": "passage"
    },
    {
      "matchFiles": [
        "^tools/pass-audit/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-audit"
    },
    {
      "matchFiles": [
        "^tools/pass-git-helper/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-git-helper"
    },
    {
      "matchFiles": [
        "^tools/passh/manifest.yaml$"
      ],
      "commitMessageTopic": "passh"
    },
    {
      "matchFiles": [
        "^tools/pass-import/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-import"
    },
    {
      "matchFiles": [
        "^tools/pass-otp/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-otp"
    },
    {
      "matchFiles": [
        "^tools/passt/manifest.yaml$"
      ],
      "commitMessageTopic": "passt"
    },
    {
      "matchFiles": [
        "^tools/pass-tail/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-tail"
    },
    {
      "matchFiles": [
        "^tools/pass-update/manifest.yaml$"
      ],
      "commitMessageTopic": "pass-update"
    },
    {
      "matchFiles": [
        "^tools/patat/manifest.yaml$"
      ],
      "commitMessageTopic": "patat"
    },
    {
      "matchFiles": [
        "^tools/pebble/manifest.yaml$"
      ],
      "commitMessageTopic": "pebble"
    },
    {
      "matchFiles": [
        "^tools/perl/manifest.yaml$"
      ],
      "commitMessageTopic": "perl"
    },
    {
      "matchFiles": [
        "^tools/phive/manifest.yaml$"
      ],
      "commitMessageTopic": "phive"
    },
    {
      "matchFiles": [
        "^tools/php/manifest.yaml$"
      ],
      "commitMessageTopic": "php"
    },
    {
      "matchFiles": [
        "^tools/pigz/manifest.yaml$"
      ],
      "commitMessageTopic": "pigz"
    },
    {
      "matchFiles": [
        "^tools/pipx/manifest.yaml$"
      ],
      "commitMessageTopic": "pipx"
    },
    {
      "matchFiles": [
        "^tools/pkgx/manifest.yaml$"
      ],
      "commitMessageTopic": "pkgx"
    },
    {
      "matchFiles": [
        "^tools/plz/manifest.yaml$"
      ],
      "commitMessageTopic": "plz"
    },
    {
      "matchFiles": [
        "^tools/pnpm/manifest.yaml$"
      ],
      "commitMessageTopic": "pnpm"
    },
    {
      "matchFiles": [
        "^tools/poctl/manifest.yaml$"
      ],
      "commitMessageTopic": "poctl"
    },
    {
      "matchFiles": [
        "^tools/podman/manifest.yaml$"
      ],
      "commitMessageTopic": "podman"
    },
    {
      "matchFiles": [
        "^tools/podman-tui/manifest.yaml$"
      ],
      "commitMessageTopic": "podman-tui"
    },
    {
      "matchFiles": [
        "^tools/polaris/manifest.yaml$"
      ],
      "commitMessageTopic": "polaris"
    },
    {
      "matchFiles": [
        "^tools/policy/manifest.yaml$"
      ],
      "commitMessageTopic": "policy"
    },
    {
      "matchFiles": [
        "^tools/pop/manifest.yaml$"
      ],
      "commitMessageTopic": "pop"
    },
    {
      "matchFiles": [
        "^tools/popeye/manifest.yaml$"
      ],
      "commitMessageTopic": "popeye"
    },
    {
      "matchFiles": [
        "^tools/portainer/manifest.yaml$"
      ],
      "commitMessageTopic": "portainer"
    },
    {
      "matchFiles": [
        "^tools/porter/manifest.yaml$"
      ],
      "commitMessageTopic": "porter"
    },
    {
      "matchFiles": [
        "^tools/posting/manifest.yaml$"
      ],
      "commitMessageTopic": "posting"
    },
    {
      "matchFiles": [
        "^tools/powerline-go/manifest.yaml$"
      ],
      "commitMessageTopic": "powerline-go"
    },
    {
      "matchFiles": [
        "^tools/powershell/manifest.yaml$"
      ],
      "commitMessageTopic": "powershell"
    },
    {
      "matchFiles": [
        "^tools/pre-commit/manifest.yaml$"
      ],
      "commitMessageTopic": "pre-commit"
    },
    {
      "matchFiles": [
        "^tools/presenterm/manifest.yaml$"
      ],
      "commitMessageTopic": "presenterm"
    },
    {
      "matchFiles": [
        "^tools/process-compose/manifest.yaml$"
      ],
      "commitMessageTopic": "process-compose"
    },
    {
      "matchFiles": [
        "^tools/procs/manifest.yaml$"
      ],
      "commitMessageTopic": "procs"
    },
    {
      "matchFiles": [
        "^tools/promcolor/manifest.yaml$"
      ],
      "commitMessageTopic": "promcolor"
    },
    {
      "matchFiles": [
        "^tools/prometheus/manifest.yaml$"
      ],
      "commitMessageTopic": "prometheus"
    },
    {
      "matchFiles": [
        "^tools/promql-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "promql-cli"
    },
    {
      "matchFiles": [
        "^tools/promtail/manifest.yaml$"
      ],
      "commitMessageTopic": "promtail"
    },
    {
      "matchFiles": [
        "^tools/promtool/manifest.yaml$"
      ],
      "commitMessageTopic": "promtool"
    },
    {
      "matchFiles": [
        "^tools/proot/manifest.yaml$"
      ],
      "commitMessageTopic": "proot"
    },
    {
      "matchFiles": [
        "^tools/proxify/manifest.yaml$"
      ],
      "commitMessageTopic": "proxify"
    },
    {
      "matchFiles": [
        "^tools/pulumi/manifest.yaml$"
      ],
      "commitMessageTopic": "pulumi"
    },
    {
      "matchFiles": [
        "^tools/purl/manifest.yaml$"
      ],
      "commitMessageTopic": "purl"
    },
    {
      "matchFiles": [
        "^tools/pushgateway/manifest.yaml$"
      ],
      "commitMessageTopic": "pushgateway"
    },
    {
      "matchFiles": [
        "^tools/pv/manifest.yaml$"
      ],
      "commitMessageTopic": "pv"
    },
    {
      "matchFiles": [
        "^tools/pwru/manifest.yaml$"
      ],
      "commitMessageTopic": "pwru"
    },
    {
      "matchFiles": [
        "^tools/pyenv/manifest.yaml$"
      ],
      "commitMessageTopic": "pyenv"
    },
    {
      "matchFiles": [
        "^tools/python/manifest.yaml$"
      ],
      "commitMessageTopic": "python"
    },
    {
      "matchFiles": [
        "^tools/python-3.12/manifest.yaml$"
      ],
      "commitMessageTopic": "python-3.12"
    },
    {
      "matchFiles": [
        "^tools/python-static/manifest.yaml$"
      ],
      "commitMessageTopic": "python-static"
    },
    {
      "matchFiles": [
        "^tools/qemu/manifest.yaml$"
      ],
      "commitMessageTopic": "qemu"
    },
    {
      "matchFiles": [
        "^tools/qrencode/manifest.yaml$"
      ],
      "commitMessageTopic": "qrencode"
    },
    {
      "matchFiles": [
        "^tools/qsv/manifest.yaml$"
      ],
      "commitMessageTopic": "qsv"
    },
    {
      "matchFiles": [
        "^tools/quarto/manifest.yaml$"
      ],
      "commitMessageTopic": "quarto"
    },
    {
      "matchFiles": [
        "^tools/quarto-full/manifest.yaml$"
      ],
      "commitMessageTopic": "quarto-full"
    },
    {
      "matchFiles": [
        "^tools/rage/manifest.yaml$"
      ],
      "commitMessageTopic": "rage"
    },
    {
      "matchFiles": [
        "^tools/rare/manifest.yaml$"
      ],
      "commitMessageTopic": "rare"
    },
    {
      "matchFiles": [
        "^tools/ravel/manifest.yaml$"
      ],
      "commitMessageTopic": "ravel"
    },
    {
      "matchFiles": [
        "^tools/redis/manifest.yaml$"
      ],
      "commitMessageTopic": "redis"
    },
    {
      "matchFiles": [
        "^tools/regal/manifest.yaml$"
      ],
      "commitMessageTopic": "regal"
    },
    {
      "matchFiles": [
        "^tools/regclient/manifest.yaml$"
      ],
      "commitMessageTopic": "regclient"
    },
    {
      "matchFiles": [
        "^tools/registry/manifest.yaml$"
      ],
      "commitMessageTopic": "registry"
    },
    {
      "matchFiles": [
        "^tools/rekor/manifest.yaml$"
      ],
      "commitMessageTopic": "rekor"
    },
    {
      "matchFiles": [
        "^tools/release-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "release-cli"
    },
    {
      "matchFiles": [
        "^tools/reptyr/manifest.yaml$"
      ],
      "commitMessageTopic": "reptyr"
    },
    {
      "matchFiles": [
        "^tools/reveal.js/manifest.yaml$"
      ],
      "commitMessageTopic": "reveal.js"
    },
    {
      "matchFiles": [
        "^tools/ripgrep/manifest.yaml$"
      ],
      "commitMessageTopic": "ripgrep"
    },
    {
      "matchFiles": [
        "^tools/rke/manifest.yaml$"
      ],
      "commitMessageTopic": "rke"
    },
    {
      "matchFiles": [
        "^tools/rke2/manifest.yaml$"
      ],
      "commitMessageTopic": "rke2"
    },
    {
      "matchFiles": [
        "^tools/rootlesskit/manifest.yaml$"
      ],
      "commitMessageTopic": "rootlesskit"
    },
    {
      "matchFiles": [
        "^tools/ruff/manifest.yaml$"
      ],
      "commitMessageTopic": "ruff"
    },
    {
      "matchFiles": [
        "^tools/runc/manifest.yaml$"
      ],
      "commitMessageTopic": "runc"
    },
    {
      "matchFiles": [
        "^tools/runlike/manifest.yaml$"
      ],
      "commitMessageTopic": "runlike"
    },
    {
      "matchFiles": [
        "^tools/runme/manifest.yaml$"
      ],
      "commitMessageTopic": "runme"
    },
    {
      "matchFiles": [
        "^tools/runtainer/manifest.yaml$"
      ],
      "commitMessageTopic": "runtainer"
    },
    {
      "matchFiles": [
        "^tools/rush/manifest.yaml$"
      ],
      "commitMessageTopic": "rush"
    },
    {
      "matchFiles": [
        "^tools/rust/manifest.yaml$"
      ],
      "commitMessageTopic": "rust"
    },
    {
      "matchFiles": [
        "^tools/salami/manifest.yaml$"
      ],
      "commitMessageTopic": "salami"
    },
    {
      "matchFiles": [
        "^tools/saml2aws/manifest.yaml$"
      ],
      "commitMessageTopic": "saml2aws"
    },
    {
      "matchFiles": [
        "^tools/sass/manifest.yaml$"
      ],
      "commitMessageTopic": "sass"
    },
    {
      "matchFiles": [
        "^tools/sass-dart/manifest.yaml$"
      ],
      "commitMessageTopic": "sass-dart"
    },
    {
      "matchFiles": [
        "^tools/savvy/manifest.yaml$"
      ],
      "commitMessageTopic": "savvy"
    },
    {
      "matchFiles": [
        "^tools/sbom2doc/manifest.yaml$"
      ],
      "commitMessageTopic": "sbom2doc"
    },
    {
      "matchFiles": [
        "^tools/sbom2dot/manifest.yaml$"
      ],
      "commitMessageTopic": "sbom2dot"
    },
    {
      "matchFiles": [
        "^tools/sbomasm/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomasm"
    },
    {
      "matchFiles": [
        "^tools/sbomdiff/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomdiff"
    },
    {
      "matchFiles": [
        "^tools/sbomex/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomex"
    },
    {
      "matchFiles": [
        "^tools/sbomgr/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomgr"
    },
    {
      "matchFiles": [
        "^tools/sbom-operator/manifest.yaml$"
      ],
      "commitMessageTopic": "sbom-operator"
    },
    {
      "matchFiles": [
        "^tools/sbomqs/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomqs"
    },
    {
      "matchFiles": [
        "^tools/sbom-tool/manifest.yaml$"
      ],
      "commitMessageTopic": "sbom-tool"
    },
    {
      "matchFiles": [
        "^tools/sbomtools/manifest.yaml$"
      ],
      "commitMessageTopic": "sbomtools"
    },
    {
      "matchFiles": [
        "^tools/sbom-utility/manifest.yaml$"
      ],
      "commitMessageTopic": "sbom-utility"
    },
    {
      "matchFiles": [
        "^tools/sbt/manifest.yaml$"
      ],
      "commitMessageTopic": "sbt"
    },
    {
      "matchFiles": [
        "^tools/scala/manifest.yaml$"
      ],
      "commitMessageTopic": "scala"
    },
    {
      "matchFiles": [
        "^tools/scc/manifest.yaml$"
      ],
      "commitMessageTopic": "scc"
    },
    {
      "matchFiles": [
        "^tools/scenarigo/manifest.yaml$"
      ],
      "commitMessageTopic": "scenarigo"
    },
    {
      "matchFiles": [
        "^tools/scorecard/manifest.yaml$"
      ],
      "commitMessageTopic": "scorecard"
    },
    {
      "matchFiles": [
        "^tools/sd/manifest.yaml$"
      ],
      "commitMessageTopic": "sd"
    },
    {
      "matchFiles": [
        "^tools/sealer/manifest.yaml$"
      ],
      "commitMessageTopic": "sealer"
    },
    {
      "matchFiles": [
        "^tools/secretize/manifest.yaml$"
      ],
      "commitMessageTopic": "secretize"
    },
    {
      "matchFiles": [
        "^tools/semgrep/manifest.yaml$"
      ],
      "commitMessageTopic": "semgrep"
    },
    {
      "matchFiles": [
        "^tools/semver/manifest.yaml$"
      ],
      "commitMessageTopic": "semver"
    },
    {
      "matchFiles": [
        "^tools/serverless/manifest.yaml$"
      ],
      "commitMessageTopic": "serverless"
    },
    {
      "matchFiles": [
        "^tools/shdotenv/manifest.yaml$"
      ],
      "commitMessageTopic": "shdotenv"
    },
    {
      "matchFiles": [
        "^tools/shellcheck/manifest.yaml$"
      ],
      "commitMessageTopic": "shellcheck"
    },
    {
      "matchFiles": [
        "^tools/shell-gpt/manifest.yaml$"
      ],
      "commitMessageTopic": "shell-gpt"
    },
    {
      "matchFiles": [
        "^tools/shiv/manifest.yaml$"
      ],
      "commitMessageTopic": "shiv"
    },
    {
      "matchFiles": [
        "^tools/shortnames/manifest.yaml$"
      ],
      "commitMessageTopic": "shortnames"
    },
    {
      "matchFiles": [
        "^tools/sish/manifest.yaml$"
      ],
      "commitMessageTopic": "sish"
    },
    {
      "matchFiles": [
        "^tools/skate/manifest.yaml$"
      ],
      "commitMessageTopic": "skate"
    },
    {
      "matchFiles": [
        "^tools/skopeo/manifest.yaml$"
      ],
      "commitMessageTopic": "skopeo"
    },
    {
      "matchFiles": [
        "^tools/slides/manifest.yaml$"
      ],
      "commitMessageTopic": "slides"
    },
    {
      "matchFiles": [
        "^tools/slirp4netns/manifest.yaml$"
      ],
      "commitMessageTopic": "slirp4netns"
    },
    {
      "matchFiles": [
        "^tools/sloop/manifest.yaml$"
      ],
      "commitMessageTopic": "sloop"
    },
    {
      "matchFiles": [
        "^tools/slsa-verifier/manifest.yaml$"
      ],
      "commitMessageTopic": "slsa-verifier"
    },
    {
      "matchFiles": [
        "^tools/socat/manifest.yaml$"
      ],
      "commitMessageTopic": "socat"
    },
    {
      "matchFiles": [
        "^tools/soci-snapshotter/manifest.yaml$"
      ],
      "commitMessageTopic": "soci-snapshotter"
    },
    {
      "matchFiles": [
        "^tools/soft-serve/manifest.yaml$"
      ],
      "commitMessageTopic": "soft-serve"
    },
    {
      "matchFiles": [
        "^tools/sonar-scanner/manifest.yaml$"
      ],
      "commitMessageTopic": "sonar-scanner"
    },
    {
      "matchFiles": [
        "^tools/sonobuoy/manifest.yaml$"
      ],
      "commitMessageTopic": "sonobuoy"
    },
    {
      "matchFiles": [
        "^tools/sops/manifest.yaml$"
      ],
      "commitMessageTopic": "sops"
    },
    {
      "matchFiles": [
        "^tools/sotp/manifest.yaml$"
      ],
      "commitMessageTopic": "sotp"
    },
    {
      "matchFiles": [
        "^tools/source-sans/manifest.yaml$"
      ],
      "commitMessageTopic": "source-sans"
    },
    {
      "matchFiles": [
        "^tools/spc/manifest.yaml$"
      ],
      "commitMessageTopic": "spc"
    },
    {
      "matchFiles": [
        "^tools/spdx-sbom-generator/manifest.yaml$"
      ],
      "commitMessageTopic": "spdx-sbom-generator"
    },
    {
      "matchFiles": [
        "^tools/speex/manifest.yaml$"
      ],
      "commitMessageTopic": "speex"
    },
    {
      "matchFiles": [
        "^tools/speexdsp/manifest.yaml$"
      ],
      "commitMessageTopic": "speexdsp"
    },
    {
      "matchFiles": [
        "^tools/spiffe-vault/manifest.yaml$"
      ],
      "commitMessageTopic": "spiffe-vault"
    },
    {
      "matchFiles": [
        "^tools/spin/manifest.yaml$"
      ],
      "commitMessageTopic": "spin"
    },
    {
      "matchFiles": [
        "^tools/spire/manifest.yaml$"
      ],
      "commitMessageTopic": "spire"
    },
    {
      "matchFiles": [
        "^tools/ssh3/manifest.yaml$"
      ],
      "commitMessageTopic": "ssh3"
    },
    {
      "matchFiles": [
        "^tools/ssh-key-confirmer/manifest.yaml$"
      ],
      "commitMessageTopic": "ssh-key-confirmer"
    },
    {
      "matchFiles": [
        "^tools/sshocker/manifest.yaml$"
      ],
      "commitMessageTopic": "sshocker"
    },
    {
      "matchFiles": [
        "^tools/stargz-snapshotter/manifest.yaml$"
      ],
      "commitMessageTopic": "stargz-snapshotter"
    },
    {
      "matchFiles": [
        "^tools/staticcheck/manifest.yaml$"
      ],
      "commitMessageTopic": "staticcheck"
    },
    {
      "matchFiles": [
        "^tools/stdin-spinner/manifest.yaml$"
      ],
      "commitMessageTopic": "stdin-spinner"
    },
    {
      "matchFiles": [
        "^tools/stern/manifest.yaml$"
      ],
      "commitMessageTopic": "stern"
    },
    {
      "matchFiles": [
        "^tools/stress-ng/manifest.yaml$"
      ],
      "commitMessageTopic": "stress-ng"
    },
    {
      "matchFiles": [
        "^tools/structurizr-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "structurizr-cli"
    },
    {
      "matchFiles": [
        "^tools/su-exec/manifest.yaml$"
      ],
      "commitMessageTopic": "su-exec"
    },
    {
      "matchFiles": [
        "^tools/supdock/manifest.yaml$"
      ],
      "commitMessageTopic": "supdock"
    },
    {
      "matchFiles": [
        "^tools/switcher/manifest.yaml$"
      ],
      "commitMessageTopic": "switcher"
    },
    {
      "matchFiles": [
        "^tools/syft/manifest.yaml$"
      ],
      "commitMessageTopic": "syft"
    },
    {
      "matchFiles": [
        "^tools/sysbox/manifest.yaml$"
      ],
      "commitMessageTopic": "sysbox"
    },
    {
      "matchFiles": [
        "^tools/systemd-docker/manifest.yaml$"
      ],
      "commitMessageTopic": "systemd-docker"
    },
    {
      "matchFiles": [
        "^tools/tabby/manifest.yaml$"
      ],
      "commitMessageTopic": "tabby"
    },
    {
      "matchFiles": [
        "^tools/tailspin/manifest.yaml$"
      ],
      "commitMessageTopic": "tailspin"
    },
    {
      "matchFiles": [
        "^tools/talosctl/manifest.yaml$"
      ],
      "commitMessageTopic": "talosctl"
    },
    {
      "matchFiles": [
        "^tools/task/manifest.yaml$"
      ],
      "commitMessageTopic": "task"
    },
    {
      "matchFiles": [
        "^tools/tasker/manifest.yaml$"
      ],
      "commitMessageTopic": "tasker"
    },
    {
      "matchFiles": [
        "^tools/tea/manifest.yaml$"
      ],
      "commitMessageTopic": "tea"
    },
    {
      "matchFiles": [
        "^tools/tejolote/manifest.yaml$"
      ],
      "commitMessageTopic": "tejolote"
    },
    {
      "matchFiles": [
        "^tools/telegraf/manifest.yaml$"
      ],
      "commitMessageTopic": "telegraf"
    },
    {
      "matchFiles": [
        "^tools/teleport/manifest.yaml$"
      ],
      "commitMessageTopic": "teleport"
    },
    {
      "matchFiles": [
        "^tools/teller/manifest.yaml$"
      ],
      "commitMessageTopic": "teller"
    },
    {
      "matchFiles": [
        "^tools/tempo/manifest.yaml$"
      ],
      "commitMessageTopic": "tempo"
    },
    {
      "matchFiles": [
        "^tools/tempo-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "tempo-cli"
    },
    {
      "matchFiles": [
        "^tools/termgraph/manifest.yaml$"
      ],
      "commitMessageTopic": "termgraph"
    },
    {
      "matchFiles": [
        "^tools/terminalizer/manifest.yaml$"
      ],
      "commitMessageTopic": "terminalizer"
    },
    {
      "matchFiles": [
        "^tools/tern/manifest.yaml$"
      ],
      "commitMessageTopic": "tern"
    },
    {
      "matchFiles": [
        "^tools/terraform/manifest.yaml$"
      ],
      "commitMessageTopic": "terraform"
    },
    {
      "matchFiles": [
        "^tools/terraform-backend-git/manifest.yaml$"
      ],
      "commitMessageTopic": "terraform-backend-git"
    },
    {
      "matchFiles": [
        "^tools/terraform-docs/manifest.yaml$"
      ],
      "commitMessageTopic": "terraform-docs"
    },
    {
      "matchFiles": [
        "^tools/terraformer/manifest.yaml$"
      ],
      "commitMessageTopic": "terraformer"
    },
    {
      "matchFiles": [
        "^tools/terragrunt/manifest.yaml$"
      ],
      "commitMessageTopic": "terragrunt"
    },
    {
      "matchFiles": [
        "^tools/tetragon/manifest.yaml$"
      ],
      "commitMessageTopic": "tetragon"
    },
    {
      "matchFiles": [
        "^tools/textlint/manifest.yaml$"
      ],
      "commitMessageTopic": "textlint"
    },
    {
      "matchFiles": [
        "^tools/tig/manifest.yaml$"
      ],
      "commitMessageTopic": "tig"
    },
    {
      "matchFiles": [
        "^tools/timoni/manifest.yaml$"
      ],
      "commitMessageTopic": "timoni"
    },
    {
      "matchFiles": [
        "^tools/tini/manifest.yaml$"
      ],
      "commitMessageTopic": "tini"
    },
    {
      "matchFiles": [
        "^tools/tinygo/manifest.yaml$"
      ],
      "commitMessageTopic": "tinygo"
    },
    {
      "matchFiles": [
        "^tools/tkn/manifest.yaml$"
      ],
      "commitMessageTopic": "tkn"
    },
    {
      "matchFiles": [
        "^tools/tlsx/manifest.yaml$"
      ],
      "commitMessageTopic": "tlsx"
    },
    {
      "matchFiles": [
        "^tools/tml/manifest.yaml$"
      ],
      "commitMessageTopic": "tml"
    },
    {
      "matchFiles": [
        "^tools/toolong/manifest.yaml$"
      ],
      "commitMessageTopic": "toolong"
    },
    {
      "matchFiles": [
        "^tools/tracee/manifest.yaml$"
      ],
      "commitMessageTopic": "tracee"
    },
    {
      "matchFiles": [
        "^tools/tracer/manifest.yaml$"
      ],
      "commitMessageTopic": "tracer"
    },
    {
      "matchFiles": [
        "^tools/traefik/manifest.yaml$"
      ],
      "commitMessageTopic": "traefik"
    },
    {
      "matchFiles": [
        "^tools/trillian/manifest.yaml$"
      ],
      "commitMessageTopic": "trillian"
    },
    {
      "matchFiles": [
        "^tools/trivy/manifest.yaml$"
      ],
      "commitMessageTopic": "trivy"
    },
    {
      "matchFiles": [
        "^tools/trivy-operator/manifest.yaml$"
      ],
      "commitMessageTopic": "trivy-operator"
    },
    {
      "matchFiles": [
        "^tools/trurl/manifest.yaml$"
      ],
      "commitMessageTopic": "trurl"
    },
    {
      "matchFiles": [
        "^tools/try/manifest.yaml$"
      ],
      "commitMessageTopic": "try"
    },
    {
      "matchFiles": [
        "^tools/tshark/manifest.yaml$"
      ],
      "commitMessageTopic": "tshark"
    },
    {
      "matchFiles": [
        "^tools/ttyd/manifest.yaml$"
      ],
      "commitMessageTopic": "ttyd"
    },
    {
      "matchFiles": [
        "^tools/tuf/manifest.yaml$"
      ],
      "commitMessageTopic": "tuf"
    },
    {
      "matchFiles": [
        "^tools/tunnelto/manifest.yaml$"
      ],
      "commitMessageTopic": "tunnelto"
    },
    {
      "matchFiles": [
        "^tools/typst/manifest.yaml$"
      ],
      "commitMessageTopic": "typst"
    },
    {
      "matchFiles": [
        "^tools/tz/manifest.yaml$"
      ],
      "commitMessageTopic": "tz"
    },
    {
      "matchFiles": [
        "^tools/uidmap/manifest.yaml$"
      ],
      "commitMessageTopic": "uidmap"
    },
    {
      "matchFiles": [
        "^tools/umoci/manifest.yaml$"
      ],
      "commitMessageTopic": "umoci"
    },
    {
      "matchFiles": [
        "^tools/uniget/manifest.yaml$"
      ],
      "commitMessageTopic": "uniget"
    },
    {
      "matchFiles": [
        "^tools/updatecli/manifest.yaml$"
      ],
      "commitMessageTopic": "updatecli"
    },
    {
      "matchFiles": [
        "^tools/upx/manifest.yaml$"
      ],
      "commitMessageTopic": "upx"
    },
    {
      "matchFiles": [
        "^tools/util-linux/manifest.yaml$"
      ],
      "commitMessageTopic": "util-linux"
    },
    {
      "matchFiles": [
        "^tools/uv/manifest.yaml$"
      ],
      "commitMessageTopic": "uv"
    },
    {
      "matchFiles": [
        "^tools/vale/manifest.yaml$"
      ],
      "commitMessageTopic": "vale"
    },
    {
      "matchFiles": [
        "^tools/valyent/manifest.yaml$"
      ],
      "commitMessageTopic": "valyent"
    },
    {
      "matchFiles": [
        "^tools/vault/manifest.yaml$"
      ],
      "commitMessageTopic": "vault"
    },
    {
      "matchFiles": [
        "^tools/vcluster/manifest.yaml$"
      ],
      "commitMessageTopic": "vcluster"
    },
    {
      "matchFiles": [
        "^tools/valocity/manifest.yaml$"
      ],
      "commitMessageTopic": "valocity"
    },
    {
      "matchFiles": [
        "^tools/vendir/manifest.yaml$"
      ],
      "commitMessageTopic": "vendir"
    },
    {
      "matchFiles": [
        "^tools/venom/manifest.yaml$"
      ],
      "commitMessageTopic": "venom"
    },
    {
      "matchFiles": [
        "^tools/vexctl/manifest.yaml$"
      ],
      "commitMessageTopic": "vexctl"
    },
    {
      "matchFiles": [
        "^tools/vexy/manifest.yaml$"
      ],
      "commitMessageTopic": "vexy"
    },
    {
      "matchFiles": [
        "^tools/vgrep/manifest.yaml$"
      ],
      "commitMessageTopic": "vgrep"
    },
    {
      "matchFiles": [
        "^tools/vhs/manifest.yaml$"
      ],
      "commitMessageTopic": "vhs"
    },
    {
      "matchFiles": [
        "^tools/viking/manifest.yaml$"
      ],
      "commitMessageTopic": "viking"
    },
    {
      "matchFiles": [
        "^tools/visidata/manifest.yaml$"
      ],
      "commitMessageTopic": "visidata"
    },
    {
      "matchFiles": [
        "^tools/vland/manifest.yaml$"
      ],
      "commitMessageTopic": "vland"
    },
    {
      "matchFiles": [
        "^tools/vscode-cli/manifest.yaml$"
      ],
      "commitMessageTopic": "vscode-cli"
    },
    {
      "matchFiles": [
        "^tools/vulnerability-operator/manifest.yaml$"
      ],
      "commitMessageTopic": "vulnerability-operator"
    },
    {
      "matchFiles": [
        "^tools/wagi/manifest.yaml$"
      ],
      "commitMessageTopic": "wagi"
    },
    {
      "matchFiles": [
        "^tools/wait/manifest.yaml$"
      ],
      "commitMessageTopic": "wait"
    },
    {
      "matchFiles": [
        "^tools/wait-for/manifest.yaml$"
      ],
      "commitMessageTopic": "wait-for"
    },
    {
      "matchFiles": [
        "^tools/walk/manifest.yaml$"
      ],
      "commitMessageTopic": "walk"
    },
    {
      "matchFiles": [
        "^tools/warp/manifest.yaml$"
      ],
      "commitMessageTopic": "warp"
    },
    {
      "matchFiles": [
        "^tools/wasmedge/manifest.yaml$"
      ],
      "commitMessageTopic": "wasmedge"
    },
    {
      "matchFiles": [
        "^tools/wasmer/manifest.yaml$"
      ],
      "commitMessageTopic": "wasmer"
    },
    {
      "matchFiles": [
        "^tools/wasmi/manifest.yaml$"
      ],
      "commitMessageTopic": "wasmi"
    },
    {
      "matchFiles": [
        "^tools/wasmtime/manifest.yaml$"
      ],
      "commitMessageTopic": "wasmtime"
    },
    {
      "matchFiles": [
        "^tools/watchexec/manifest.yaml$"
      ],
      "commitMessageTopic": "watchexec"
    },
    {
      "matchFiles": [
        "^tools/watchtower/manifest.yaml$"
      ],
      "commitMessageTopic": "watchtower"
    },
    {
      "matchFiles": [
        "^tools/webdavfs/manifest.yaml$"
      ],
      "commitMessageTopic": "webdavfs"
    },
    {
      "matchFiles": [
        "^tools/webhook/manifest.yaml$"
      ],
      "commitMessageTopic": "webhook"
    },
    {
      "matchFiles": [
        "^tools/webhookd/manifest.yaml$"
      ],
      "commitMessageTopic": "webhookd"
    },
    {
      "matchFiles": [
        "^tools/webhook-tester/manifest.yaml$"
      ],
      "commitMessageTopic": "webhook-tester"
    },
    {
      "matchFiles": [
        "^tools/websocat/manifest.yaml$"
      ],
      "commitMessageTopic": "websocat"
    },
    {
      "matchFiles": [
        "^tools/wg/manifest.yaml$"
      ],
      "commitMessageTopic": "wg"
    },
    {
      "matchFiles": [
        "^tools/whalebrew/manifest.yaml$"
      ],
      "commitMessageTopic": "whalebrew"
    },
    {
      "matchFiles": [
        "^tools/win-gpg-agent/manifest.yaml$"
      ],
      "commitMessageTopic": "win-gpg-agent"
    },
    {
      "matchFiles": [
        "^tools/win-ssh-agent/manifest.yaml$"
      ],
      "commitMessageTopic": "win-ssh-agent"
    },
    {
      "matchFiles": [
        "^tools/wireguard-go/manifest.yaml$"
      ],
      "commitMessageTopic": "wireguard-go"
    },
    {
      "matchFiles": [
        "^tools/witness/manifest.yaml$"
      ],
      "commitMessageTopic": "witness"
    },
    {
      "matchFiles": [
        "^tools/wksctl/manifest.yaml$"
      ],
      "commitMessageTopic": "wksctl"
    },
    {
      "matchFiles": [
        "^tools/woke/manifest.yaml$"
      ],
      "commitMessageTopic": "woke"
    },
    {
      "matchFiles": [
        "^tools/wolfictl/manifest.yaml$"
      ],
      "commitMessageTopic": "wolfictl"
    },
    {
      "matchFiles": [
        "^tools/woodpecker/manifest.yaml$"
      ],
      "commitMessageTopic": "woodpecker"
    },
    {
      "matchFiles": [
        "^tools/wordcloud/manifest.yaml$"
      ],
      "commitMessageTopic": "wordcloud"
    },
    {
      "matchFiles": [
        "^tools/wsl-open/manifest.yaml$"
      ],
      "commitMessageTopic": "wsl-open"
    },
    {
      "matchFiles": [
        "^tools/wslu/manifest.yaml$"
      ],
      "commitMessageTopic": "wslu"
    },
    {
      "matchFiles": [
        "^tools/xcaddy/manifest.yaml$"
      ],
      "commitMessageTopic": "xcaddy"
    },
    {
      "matchFiles": [
        "^tools/xdg-utils/manifest.yaml$"
      ],
      "commitMessageTopic": "xdg-utils"
    },
    {
      "matchFiles": [
        "^tools/xh/manifest.yaml$"
      ],
      "commitMessageTopic": "xh"
    },
    {
      "matchFiles": [
        "^tools/xmlstarlet/manifest.yaml$"
      ],
      "commitMessageTopic": "xmlstarlet"
    },
    {
      "matchFiles": [
        "^tools/xq/manifest.yaml$"
      ],
      "commitMessageTopic": "xq"
    },
    {
      "matchFiles": [
        "^tools/xurls/manifest.yaml$"
      ],
      "commitMessageTopic": "xurls"
    },
    {
      "matchFiles": [
        "^tools/yamale/manifest.yaml$"
      ],
      "commitMessageTopic": "yamale"
    },
    {
      "matchFiles": [
        "^tools/yamlfmt/manifest.yaml$"
      ],
      "commitMessageTopic": "yamlfmt"
    },
    {
      "matchFiles": [
        "^tools/yamllint/manifest.yaml$"
      ],
      "commitMessageTopic": "yamllint"
    },
    {
      "matchFiles": [
        "^tools/yarn/manifest.yaml$"
      ],
      "commitMessageTopic": "yarn"
    },
    {
      "matchFiles": [
        "^tools/yasu/manifest.yaml$"
      ],
      "commitMessageTopic": "yasu"
    },
    {
      "matchFiles": [
        "^tools/yh/manifest.yaml$"
      ],
      "commitMessageTopic": "yh"
    },
    {
      "matchFiles": [
        "^tools/youki/manifest.yaml$"
      ],
      "commitMessageTopic": "youki"
    },
    {
      "matchFiles": [
        "^tools/yq/manifest.yaml$"
      ],
      "commitMessageTopic": "yq"
    },
    {
      "matchFiles": [
        "^tools/ytt/manifest.yaml$"
      ],
      "commitMessageTopic": "ytt"
    },
    {
      "matchFiles": [
        "^tools/zed/manifest.yaml$"
      ],
      "commitMessageTopic": "zed"
    },
    {
      "matchFiles": [
        "^tools/zeitgeist/manifest.yaml$"
      ],
      "commitMessageTopic": "zeitgeist"
    },
    {
      "matchFiles": [
        "^tools/zitadel/manifest.yaml$"
      ],
      "commitMessageTopic": "zitadel"
    },
    {
      "matchFiles": [
        "^tools/zot/manifest.yaml$"
      ],
      "commitMessageTopic": "zot"
    }
  ],
  "customManagers": [
    {
      "customType": "regex",
      "fileMatch": [
        "(^|/|\\.)Dockerfile[^/]*$"
      ],
      "matchStrings": [
        "#syntax=(?<depName>[^:]+):(?<currentValue>[^@]+)(@.+)?\\n"
      ],
      "datasourceTemplate": "docker",
      "depNameTemplate": "docker/dockerfile"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/acorn/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "acorn-io/runtime",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/acr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Azure/acr-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/act/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nektos/act",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/actions-runner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "actions/runner",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/actions-usage/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "self-actuated/actions-usage",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/age/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "FiloSottile/age",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ah/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "artifacthub/hub",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aiac/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gofireflyio/aiac",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aichat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sigoden/aichat",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aider/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Aider-AI/aider",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/air/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "air-verse/air",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/alertmanager/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/alertmanager",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/alex/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alex",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ansi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fidian/ansi",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/apk/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alpinelinux/apk-tools",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/apko/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chainguard-dev/apko",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aqua/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aquaproj/aqua",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/argo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "argoproj/argo-workflows",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/argocd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "argoproj/argo-cd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/arkade/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alexellis/arkade",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/artifactory-cleanup/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crazy-max/artifactory-cleanup",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/asciigraph/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "guptarohit/asciigraph",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/asciinema/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "asciinema",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/autocert/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "smallstep/autocert",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aws/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "awscli",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/aws2/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aws/aws-cli",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/axel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "axel-download-accelerator/axel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/az/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "azure-cli",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bandwhich/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "imsnif/bandwhich",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sharkdp/bat",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bento/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "warpstreamlabs/bento",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bicep/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Azure/bicep",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bif/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "FairwindsOps/bif",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "marcosnils/bin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/blackbox-exporter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/blackbox_exporter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/blincus/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ublue-os/blincus",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bogrod/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bogrod",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bom/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/bom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bomber/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "devops-kung-fu/bomber",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bomshell/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chainguard-dev/bomshell",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/botsay/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "xyproto/botsay",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/box/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "box-project/box",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bpftool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "libbpf/bpftool",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bubblewrap/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/bubblewrap",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/buildah/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/buildah",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/buildg/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ktock/buildg",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/buildkit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "moby/buildkit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/buildx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/buildx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bumblebee/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "solo-io/bumblebee",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/bypass4netns/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rootless-containers/bypass4netns",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/caddy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "caddyserver/caddy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cadvisor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/cadvisor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/calicoctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectcalico/calico",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/car/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tetratelabs/car",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cascadia-code/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "microsoft/cascadia-code",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/catatonit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openSUSE/catatonit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/catgpt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ibuildthecloud/catgpt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cdebug/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "iximiuz/cdebug",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cdncheck/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/cdncheck",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cdxgen/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "@cyclonedx/cdxgen",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cfssl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cloudflare/cfssl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chainsaw/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kyverno/chainsaw",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/charm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/charm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chart-releaser/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "helm/chart-releaser",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chart-testing/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "helm/chart-testing",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cheat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cheat/cheat",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/checkov/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "checkov",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chekr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ckotzbauer/chekr",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chigo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "UltiRequiem/chigo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chisel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jpillora/chisel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/chroma/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alecthomas/chroma",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cilium/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cilium/cilium-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cinf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mhausenblas/cinf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/civo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "civo/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/click/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "databricks/click",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/clive/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "koki-develop/clive",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cloudflared/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cloudflare/cloudflared",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/clusterawsadm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/cluster-api-provider-aws",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/clusterctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/cluster-api",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/clusterlint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "digitalocean/clusterlint",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cmctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cert-manager/cmctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cni/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containernetworking/plugins",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cnitool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containernetworking/cni",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cntr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Mic92/cntr",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cobra-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "spf13/cobra-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cockroach/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cockroachdb/cockroach",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/coder/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "coder/coder",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/code-server/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "coder/code-server",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/colima/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "abiosoft/colima",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/compose-bridge/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/compose-bridge-binaries",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/composer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "composer/composer",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/composerize/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "composerize",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/concourse/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "concourse/concourse",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/conftest/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "open-policy-agent/conftest",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/conmon/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/conmon",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/consul/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hashicorp/consul",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/container2wasm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ktock/container2wasm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/containerd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-lunatic/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "deislabs/containerd-wasm-shims",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-slight/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "deislabs/containerd-wasm-shims",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-spin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "spinkube/containerd-shim-spin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-spin-runwasi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "deislabs/containerd-wasm-shims",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-wasmedge/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/runwasi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^containerd-shim-wasmedge/v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-wasmer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/runwasi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^containerd-shim-wasmer/v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-wasmtime/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/runwasi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^containerd-shim-wasmtime/v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerd-shim-wws/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "deislabs/containerd-wasm-shims",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containers-common/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/common",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containers-image/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/image",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containerssh/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ContainerSSH/ContainerSSH",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/containers-storage/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/storage",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/copa/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "project-copacetic/copacetic",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cosign/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sigstore/cosign",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cowsay/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Code-Hex/Neo-cowsay",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/crane/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/go-containerregistry",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/crictl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/cri-tools",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cri-dockerd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Mirantis/cri-dockerd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cri-o/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cri-o/cri-o",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/croc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "schollz/croc",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cross/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cross-rs/cross",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/crossplane/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crossplane/crossplane",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/crun/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/crun",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^(?<version>\\\\d+\\\\.\\\\d+(\\\\.\\\\d+)?)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/csvlens/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "YS-L/csvlens",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ct/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "flatcar/container-linux-config-transpiler",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ctop/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bcicen/ctop",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ct_server/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/certificate-transparency-go",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cue/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cue-lang/cue",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/curl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "curl/curl",
      "datasourceTemplate": "custom.curl"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/curlie/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rs/curlie",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cve-bin-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cve-bin-tool",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cvemap/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/cvemap",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cyclonedx-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "CycloneDX/cyclonedx-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cyclonedx-gomod/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "CycloneDX/cyclonedx-gomod",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cyphernetes/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "AvitalTamir/cyphernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/cypher-shell/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "neo4j/neo4j",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dagger/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dagger/dagger",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dart/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dart-lang/sdk",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dasel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "TomWright/dasel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/datree/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "datreeio/datree",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/daytona/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "daytonaio/daytona",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dbui/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "KenanBek/dbui",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dcp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "exdx/dcp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ddosify/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ddosify/ddosify",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/decktape/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "decktape",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/delta/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dandavison/delta",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/deno/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "denoland/deno",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dependency-check/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jeremylong/DependencyCheck",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/depot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "depot/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dep-tree/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gabotechs/dep-tree",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/devbox/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jetify-com/devbox",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/devcontainer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "@devcontainers/cli",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/devpod/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "loft-sh/devpod",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/diffoci/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "reproducible-containers/diffoci",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dinit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tozd/dinit",
      "datasourceTemplate": "gitlab-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/direnv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "direnv/direnv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/distrobox/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "89luca89/distrobox",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/diun/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crazy-max/diun",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dive/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wagoodman/dive",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dnsx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/dnsx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "moby/moby",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-base/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/base-cli-plugin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-compose/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/compose",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-compose-switch/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/compose-switch",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-compose-v1/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/compose",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^(?<version>1\\.\\d+\\.\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-credential-acr-env/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chrismellard/docker-credential-acr-env",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-credential-ecr-login/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "awslabs/amazon-ecr-credential-helper",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-credential-gcr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "GoogleCloudPlatform/docker-credential-gcr",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-credential-helpers/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/docker-credential-helpers",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-credential-magic/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker-credential-magic/docker-credential-magic",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-debug/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^docker-debug/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-desktop/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^docker-desktop/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dockerfilegraph/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "patrickhoefler/dockerfilegraph",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-gen/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nginx-proxy/docker-gen",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-index/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/index-cli-plugin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-init/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^docker-init/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-machine/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/machine",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-manpages/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/cli",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-preview/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "moby/moby",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-rootless/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "moby/moby",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-sbom/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/sbom-cli-plugin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docker-scout/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/scout-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dockle/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "goodwithtech/dockle",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/docuum/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stepchowfun/docuum",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/doggo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mr-karan/doggo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "goccy/go-graphviz",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dotenvx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dotenvx/dotenvx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dotnet-runtime/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dotnet/runtime",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dotnet-sdk/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dotnet/sdk",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dragonfly/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dragonflyoss/Dragonfly2",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dry/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "moncho/dry",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dua/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Byron/dua-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/duf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "muesli/duf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/duffle/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cnabio/duffle",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dumb-init/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Yelp/dumb-init",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/dyff/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "homeport/dyff",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/earthly/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "earthly/earthly",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ecapture/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gojue/ecapture",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/eksctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "eksctl-io/eksctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ekz/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chanwit/ekz",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/elia/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "darrenburns/elia",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/emoj/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "emoj",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/emojisum/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "emojisum/emojisum",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^draft\\+(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/envcli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "EnvCLI/EnvCLI",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/envsub/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stephenc/envsub",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/esbuild/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "evanw/esbuild",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/etcd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "etcd-io/etcd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/etcdadm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/etcdadm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/exa/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ogham/exa",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ezghsa/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "csdev/ezghsa",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/faas-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openfaas/faas-cli",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/faasd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openfaas/faasd",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fabric/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "danielmiessler/fabric",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/falco/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "falcosecurity/falco",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/falcosidekick/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "falcosecurity/falcosidekick",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fastgron/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "adamritter/fastgron",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sharkdp/fd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/figlet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cmatsuoka/figlet",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/firecracker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "firecracker-microvm/firecracker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/firectl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "firecracker-microvm/firectl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/firejail/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "netblue30/firejail",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/flameshow/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "flameshow",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/flarectl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cloudflare/cloudflare-go",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>0\\.\\d+\\.\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fleet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rancher/fleet",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/floodgate/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^floodgate/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/flux/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "influxdata/flux",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/flux2/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fluxcd/flux2",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/flyctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "superfly/flyctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fontawesome-free/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "FortAwesome/Font-Awesome",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/footloose/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "weaveworks/footloose",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/forgejo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "forgejo/forgejo",
      "datasourceTemplate": "git-tags",
      "packageNameTemplate": "https://codeberg.org/forgejo/forgejo",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+\\.\\d+-\\d+)$",
      "versioningTemplate": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<build>\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/forgit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wfxr/forgit",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/foyle/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jlewi/foyle",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wader/fq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/frankphp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dunglas/frankenphp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/freeze/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/freeze",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fregot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fugue/fregot",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/furyctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sighupio/furyctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fuse-overlayfs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/fuse-overlayfs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fuse-overlayfs-snapshotter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/fuse-overlayfs-snapshotter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "antonmedv/fx",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/fzf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "junegunn/fzf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v?(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gatekeeper/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "open-policy-agent/gatekeeper",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gcloud/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "twistedpair/google-cloud-sdk",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/geist-font/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vercel/geist-font",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/genie/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "harshalranjhani/genie",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/geyser/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^geyser/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gh/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cli/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gh-copilot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "github/gh-copilot",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ghostunnel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ghostunnel/ghostunnel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "git/git",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gita/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gita",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-credential-gopass/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gopasspw/git-credential-gopass",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-credential-oauth/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hickford/git-credential-oauth",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitea/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "go-gitea/gitea",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-filter-repo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "newren/git-filter-repo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-graph/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mlange-42/git-graph",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-igitt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mlange-42/git-igitt",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitjob/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rancher/gitjob",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitlabci-local/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitlabci-local",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitlab-ci-pipelines-exporter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mvisonneau/gitlab-ci-pipelines-exporter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitlab-release/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitlab-release",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitlab-runner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitlab-org/gitlab-runner",
      "datasourceTemplate": "gitlab-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitleaks/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitleaks/gitleaks",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/git-lfs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "git-lfs/git-lfs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitoxide/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Byron/gitoxide",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitsign/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sigstore/gitsign",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gittuf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gittuf/gittuf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gitui/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "extrawurst/gitui",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/glab/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitlab-org/cli",
      "datasourceTemplate": "gitlab-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/glow/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/glow",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gnuplot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.code.sf.net/p/gnuplot/gnuplot-main.git",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^\\d+\\.\\d*[02468]\\.\\d+$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/go/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "golang/go",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^go(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/goblin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "barelyhuman/goblin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gobump/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chainguard-dev/gobump",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gocryptfs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rfjakob/gocryptfs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/godotenv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "joho/godotenv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gojq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "itchyny/gojq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/golangci-lint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "golangci/golangci-lint",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/go-md2man/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cpuguy83/go-md2man",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/go-modiff/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "saschagrunert/go-modiff",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/go-mod-upgrade/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "oligot/go-mod-upgrade",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gomplate/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hairyhenderson/gomplate",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gopass/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gopasspw/gopass",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/goreleaser/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "goreleaser/goreleaser",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gosec/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "securego/gosec",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gosu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tianon/gosu",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gotestsum/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gotestyourself/gotestsum",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/govc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vmware/govmomi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gox/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "authelia/gox",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/goyacc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "golang/tools",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gptscript/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gptscript-ai/gptscript",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gradle/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gradle/gradle",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grafana/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/grafana",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grafana-agent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/agent",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/graphviz/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "graphviz/graphviz",
      "datasourceTemplate": "gitlab-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gron/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tomnomnom/gron",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grpcurl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fullstorydev/grpcurl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/grizzly",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grunt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grunt",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/grype/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "anchore/grype",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gsutil/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gsutil",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/guac/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "guacsec/guac",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gum/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/gum",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/gvisor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/gvisor",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^release-(?<version>.+)\\.0$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hadolint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hadolint/hadolint",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/has/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kdabir/has",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/havener/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "homeport/havener",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hcloud/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hetznercloud/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/helm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "helm/helm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/helmfile/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "roboll/helmfile",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/helmify/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "arttor/helmify",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hetzner-k3s/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vitobotta/hetzner-k3s",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hexyl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sharkdp/hexyl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hishtory/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ddworken/hishtory",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/holmesgpt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "robusta-dev/holmesgpt",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hopp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "@hoppscotch/cli",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ht/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "andyk/ht",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/htmx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bigskysoftware/htmx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/httpie/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "httpie",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/httpx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/httpx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hub/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mislav/hub",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hubble/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cilium/hubble",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/huber/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "innobead/huber",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hub-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "docker/hub-tool",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hugo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gohugoio/hugo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hurl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Orange-OpenSource/hurl",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/hyperfine/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sharkdp/hyperfine",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ignite/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "weaveworks/ignite",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/img/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "genuinetools/img",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/imgcrypt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/imgcrypt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/imgpkg/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "carvel-dev/imgpkg",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/incus/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "lxc/incus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/influx-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "influxdata/influx-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/influxdb/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "influxdata/influxdb",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ingress2gateway/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/ingress2gateway",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/inotify-tools/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "inotify-tools/inotify-tools",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/inshellisense/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "@microsoft/inshellisense",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/in-toto/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "in-toto/in-toto-golang",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/iptables/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.netfilter.org/iptables/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/it-depends/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "it-depends",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jabba/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Jabba-Team/jabba",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jaq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "01mf02/jaq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jaxb/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "eclipse-ee4j/jaxb-ri",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^(?<version>.+)-RI$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jb/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jsonnet-bundler/jsonnet-bundler",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jc",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jenkins-remoting/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jenkinsci/remoting",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jetbrainsmono/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "JetBrains/JetBrainsMono",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jfrog/jfrog-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jfq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jfq",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jj/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "martinvonz/jj",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jless/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "PaulJuliusMartinez/jless",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jnv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ynqa/jnv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jmespath/jp",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jqlang/jq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^jq-(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jqp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "noahgorstein/jqp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jsonata-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jsonata-cli",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/json-exporter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus-community/json_exporter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jsonnet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/go-jsonnet",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jsonplot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sgreben/jp",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/just/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "casey/just",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jwt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mike-engel/jwt-cli",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/jx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jenkins-x/jx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k0s/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k0sproject/k0s",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k0sctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k0sproject/k0sctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k2d/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "portainer/k2d",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k3d/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k3d-io/k3d",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k3s/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^k3s/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k3sup/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alexellis/k3sup",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k6/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/k6",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k8senv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "navilg/k8senv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k8sgpt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k8sgpt-ai/k8sgpt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k8spacket/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k8spacket/k8spacket",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k8s-tew/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "darxkies/k8s-tew",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/k9s/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "derailed/k9s",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kapp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "carvel-dev/kapp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/katana/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/katana",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kbld/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "carvel-dev/kbld",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kbom/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rad-security/kbom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kbrew/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kbrew-dev/kbrew",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kcount/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pan-net-security/kcount",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kcp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kcp-dev/kcp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "UKHomeOffice/kd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kdo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stepro/kdo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ketch/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "theketchio/ketch",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kexp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "iximiuz/kexp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/keybase/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "keybase/client",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/keyoxide/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "keyoxide",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kgctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "squat/kilo",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kind/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/kind",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kine/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "k3s-io/kine",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kink/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Trendyol/kink",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kitt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kitt-shell",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kitty/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kovidgoyal/kitty",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kluctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kluctl/kluctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kmon/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "orhun/kmon",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kn/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "knative/client",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ko/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ko-build/ko",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kompose/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kompose",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/konf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "SimonTheLeg/konf-go",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kots/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "replicatedhq/kots",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "buildpacks-community/kpack-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kpt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kptdev/kpt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kpxhs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "akazukin5151/kpxhs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/krew/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/krew",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kroki-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "yuzutech/kroki-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ksort/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "superbrothers/ksort",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ktop/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vladimirvivien/ktop",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ktunnel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "omrikiei/ktunnel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeadm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-apiserver/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeaudit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Shopify/kubeaudit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-bench/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aquasecurity/kube-bench",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubebox/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubebox",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubebuilder/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/kubebuilder",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-burner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kube-burner/kube-burner",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeclarity-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openclarity/kubeclarity",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubecolor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hidetatz/kubecolor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeconform/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "yannh/kubeconform",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-controller-manager/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl-build/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vmware-archive/buildkit-cli-for-kubectl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl-free/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "makocchi-git/kubectl-free",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl-oidc-login/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "int128/kubelogin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl-resources/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "howardjohn/kubectl-resources",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectl-ssh-proxy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "little-angry-clouds/kubectl-ssh-proxy",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubectx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ahmetb/kubectx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubefire/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "innobead/kubefire",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubelet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeletctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cyberark/kubeletctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-linter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stackrox/kube-linter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "doitintl/kube-no-trouble",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-proxy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-psp-advisor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sysdiglabs/kube-psp-advisor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubernetes-json-schema/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubescape/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubescape/kubescape",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-scheduler/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/kubernetes",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-score/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "zegl/kube-score",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeseal/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bitnami-labs/sealed-secrets",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubesec/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "controlplaneio/kubesec",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeshark/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubeshark/kubeshark",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeswitch/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "danielb42/kubeswitch",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kube-trigger/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubevela/kube-trigger",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubeval/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "instrumenta/kubeval",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kubo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ipfs/kubo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kudo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kudobuilder/kudo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kustomize/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/kustomize",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^kustomize/v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kustomizer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stefanprodan/kustomizer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kuttl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kudobuilder/kuttl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kwok/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/kwok",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/kyverno/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kyverno/kyverno",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lab/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "zaquestion/lab",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lazydocker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jesseduffield/lazydocker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lazygit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jesseduffield/lazygit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lazysql/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jorgerojas26/lazysql",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lazytrivy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "owenrumney/lazytrivy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lectl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sahsanu/lectl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lego/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "go-acme/lego",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libbpf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "libbpf/libbpf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libcap/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "git://git.kernel.org/pub/scm/libs/libcap/libcap.git",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^libcap-(?<version>\\d+\\.\\d+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libcap-ng/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stevegrubb/libcap-ng",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libcgroup/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "libcgroup/libcgroup",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libgmp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "gitlab-releases",
      "extractVersionTemplate": "^libgmp/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libjansson/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "akheron/jansson",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libmnl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.netfilter.org/libmnl/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^libmnl-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libnfnetlink/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.netfilter.org/libnfnetlink/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^libnfnetlink-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libnftnl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.netfilter.org/libnftnl/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^libnftnl-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/libnvidia-container/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "NVIDIA/libnvidia-container",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lima/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "lima-vm/lima",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/linkchecker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "linkchecker",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/linux-kernel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/linux-kernel-wsl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "microsoft/WSL2-Linux-Kernel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^linux-msft-wsl-(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/linux-kernel-wsl-stable/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "microsoft/WSL2-Linux-Kernel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^linux-msft-wsl-(?<version>5\\..+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/linuxkit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "linuxkit/linuxkit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/local-ai/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mudler/LocalAI",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/localizer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "getoutreach/localizer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/loft/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "loft-sh/loft",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/logcli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/loki",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/loki/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/loki",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/loki-canary/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/loki",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lowcharts/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "juan-leon/lowcharts",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lsd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "lsd-rs/lsd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lstags/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ivanilves/lstags",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+\\.\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/luet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mudler/luet",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lxroot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "parke/lxroot",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/lz4/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "lz4/lz4",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mage/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "magefile/mage",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mailpit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "axllent/mailpit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/make/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.savannah.gnu.org/git/make.git",
      "datasourceTemplate": "git-tags",
      "versioningTemplate": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(\\.(?<build>\\d+))?$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mani/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "alajmo/mani",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/manifest-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "estesp/manifest-tool",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mapcidr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/mapcidr",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/markdownlint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "markdownlint-cli",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/marvin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "undistro/marvin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/maven/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "apache/maven",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^maven-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "minio/mc",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^RELEASE.(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mcfly/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cantino/mcfly",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mcrcon/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Tiiffi/mcrcon",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/melange/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chainguard-dev/melange",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/melt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/melt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mergerfs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "trapexit/mergerfs",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mermaid-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "@mermaid-js/mermaid-cli",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/meteor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "raystack/meteor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/meteor-commit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stefanlogue/meteor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mgo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "CAFxX/mgo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/micro/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "micro/micro",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/miller/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "johnkerl/miller",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mimir/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/mimir",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mimirtool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/mimir",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^mimir-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/minder/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stacklok/minder",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/minecraft-server/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^minecraft-server/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/minectl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dirien/minectl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/minikube/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes/minikube",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/minio/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "minio/minio",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^RELEASE.(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mink/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mattmoor/mink",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mintoolkit/mint",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mitmproxy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mitmproxy/mitmproxy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mkcert/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "FiloSottile/mkcert",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mkdocs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mkdocs",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mods/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/mods",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/monaspace/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "githubnext/monaspace",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mp3binder/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crra/mp3binder",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/multiverse/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Multiverse/Multiverse-Core",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/multiverse-inventories/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Multiverse/Multiverse-Portals",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/multiverse-netherportals/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Multiverse/Multiverse-NetherPortals",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/multiverse-portals/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Multiverse/Multiverse-Portals",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/multiverse-signportals/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Multiverse/Multiverse-SignPortals",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mu-repo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mu-repo",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/musl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.musl-libc.org/git/musl",
      "datasourceTemplate": "git-tags",
      "versioningTemplate": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mutagen/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mutagen-io/mutagen",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/mutagen-compose/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mutagen-io/mutagen-compose",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/n8n/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "n8n",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/namespace/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^namespace/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nancy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sonatype-nexus-community/nancy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/navi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "denisidoro/navi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ncdu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "git://g.blicky.net/ncdu.git",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+(\\.\\d+)?)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/neo4j/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "neo4j/neo4j",
      "datasourceTemplate": "github-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/neofetch/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dylanaraps/neofetch",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nerdctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/nerdctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nerd-fonts/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ryanoasis/nerd-fonts",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/newman/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "newman",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nftables/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.netfilter.org/nftables/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nms/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bartobri/no-more-secrets",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/node-exporter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/node_exporter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nodejs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nodejs/node",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nodejs-lts/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^nodejs-lts/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nomad/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hashicorp/nomad",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/norouter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "norouter/norouter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/notation/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "notaryproject/notation",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/npm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "npm/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nsutils/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rd235/nsutils",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nuclei/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/nuclei",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nuclei-templates/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/nuclei-templates",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nushell/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nushell/nushell",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nvidia-container-toolkit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "NVIDIA/nvidia-container-toolkit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nvm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nvm-sh/nvm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nx",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nydus/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dragonflyoss/nydus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/nydus-snapshotter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/nydus-snapshotter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openshift/origin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ocb/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "open-telemetry/opentelemetry-collector",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^cmd/builder/v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oci-image-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opencontainers/image-tools",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oci-runtime-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opencontainers/runtime-tools",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ocm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "open-component-model/ocm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/octopilot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dailymotion-oss/octopilot",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/octosql/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cube2222/octosql",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oidc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ctron/oidc-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oidc-claims/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nicholasdille/oidc-claims",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ojg/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ohler55/ojg",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/opa/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "open-policy-agent/opa",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/openhue-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openhue/openhue-cli",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/openjdk/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^openjdk/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/openjdk-jre/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^openjdk/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/opentofu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opentofu/opentofu",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/oras/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "oras-project/oras",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/osquery/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "osquery/osquery",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/osv-scanner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/osv-scanner",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/overlaybd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/overlaybd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/overlaybd-snapshotter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/accelerated-container-image",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pack/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "buildpacks/pack",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/packer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hashicorp/packer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pacstall/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pacstall/pacstall",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pandoc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jgm/pandoc",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/papermc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^papermc/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/paranoia/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jetstack/paranoia",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/parca/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "parca-dev/parca",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/parca-agent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "parca-dev/parca-agent",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pass",
      "datasourceTemplate": "git-tags",
      "packageNameTemplate": "https://git.zx2c4.com/password-store",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/passage/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^passage/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-audit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pass-audit",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-git-helper/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "languitar/pass-git-helper",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/passh/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "clarkwang/passh",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-import/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pass-import",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-otp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tadfisher/pass-otp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/passt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://passt.top/passt/",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^(?<version>\\d+_\\d+_\\d+\\.\\w+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-tail/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "palortoff/pass-extension-tail",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pass-update/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "roddhjav/pass-update",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/patat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jaspervdj/patat",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pebble/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "canonical/pebble",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/perl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Perl/perl5",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d*[02468]\\.\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/phive/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "phar-io/phive",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/php/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "php/php-src",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^php-(?<version>\\d+\\.\\d+\\.\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pigz/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "madler/pigz",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pipx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pipx",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pkgx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pkgxdev/pkgx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/plz/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "m1guelpf/plz-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pnpm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pnpm/pnpm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/poctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus-operator/poctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/podman/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/podman",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/podman-tui/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/podman-tui",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/polaris/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "FairwindsOps/polaris",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/policy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opcr-io/policy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pop/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/pop",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/popeye/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "derailed/popeye",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/portainer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "portainer/portainer",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/porter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "getporter/porter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/posting/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "darrenburns/posting",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/powerline-go/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "justjanne/powerline-go",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/powershell/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "PowerShell/PowerShell",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pre-commit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pre-commit",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/presenterm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mfontanini/presenterm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/process-compose/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "F1bonacc1/process-compose",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/procs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dalance/procs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/promcolor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fhemberger/promcolor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/prometheus/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/prometheus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/promql-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nalbury/promql-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/promtail/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/loki",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/promtool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/prometheus",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/proot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "proot-me/proot",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/proxify/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/proxify",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pulumi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pulumi/pulumi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/purl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "catatsuy/purl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pushgateway/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "prometheus/pushgateway",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "a-j-wood/pv",
      "datasourceTemplate": "git-tags",
      "packageNameTemplate": "https://codeberg.org/a-j-wood/pv",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+\\.\\d+-\\d+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pwru/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cilium/pwru",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/pyenv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "pyenv/pyenv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/python/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^python/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/python-3.12/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^python-3.12/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/python-static/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^python/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/qemu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "qemu/qemu",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/qrencode/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fukuchi/libqrencode",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/qsv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jqnatividad/qsv",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/quarto/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "quarto-dev/quarto-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/quarto-full/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "quarto-dev/quarto-cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rage/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "str4d/rage",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rare/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "zix99/rare",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ravel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "valyentdev/ravel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/redis/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "redis/redis",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/regal/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "StyraInc/regal",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/regclient/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "regclient/regclient",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/registry/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "distribution/distribution",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rekor/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sigstore/rekor",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/release-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitlab-org/release-cli",
      "datasourceTemplate": "gitlab-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/reptyr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nelhage/reptyr",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^reptyr-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/reveal.js/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hakimel/reveal.js",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ripgrep/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "BurntSushi/ripgrep",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rke/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rancher/rke",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rke2/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^rke2/(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rootlesskit/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rootless-containers/rootlesskit",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ruff/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "astral-sh/ruff",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/runc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opencontainers/runc",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/runlike/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "runlike",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/runme/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stateful/runme",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/runtainer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "plumber-cd/runtainer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rush/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "shenwei356/rush",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/rust/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rust-lang/rust",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/salami/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "petrgazarov/salami",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/saml2aws/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "Versent/saml2aws",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sass/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sass",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sass-dart/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sass/dart-sass",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/savvy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "getsavvyinc/savvy-cli",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbom2doc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sbom2doc",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbom2dot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sbom2dot",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomasm/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "interlynk-io/sbomasm",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomdiff/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sbomdiff",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomex/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "interlynk-io/sbomex",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomgr/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "interlynk-io/sbomgr",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbom-operator/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ckotzbauer/sbom-operator",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomqs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "interlynk-io/sbomqs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbom-tool/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "microsoft/sbom-tool",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbomtools/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sbomtools",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbom-utility/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "CycloneDX/sbom-utility",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sbt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sbt/sbt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/scala/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "scala/scala",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/scc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "boyter/scc",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/scenarigo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "zoncoen/scenarigo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/scorecard/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ossf/scorecard",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "chmln/sd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sealer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sealerio/sealer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/secretize/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bbl/secretize",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/semgrep/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "semgrep",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/semver/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fsaintjacques/semver-tool",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/serverless/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "serverless",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/shdotenv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ko1nksm/shdotenv",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/shellcheck/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "koalaman/shellcheck",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/shell-gpt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "shell-gpt",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/shiv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "linkedin/shiv",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/shortnames/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/shortnames",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sish/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "antoniomika/sish",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/skate/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/skate",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/skopeo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/skopeo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/slides/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "maaslalani/slides",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/slirp4netns/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rootless-containers/slirp4netns",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sloop/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "salesforce/sloop",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/slsa-verifier/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "slsa-framework/slsa-verifier",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/socat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "git://repo.or.cz/socat.git",
      "datasourceTemplate": "git-tags",
      "extractVersionTemplate": "^tag-(?<version>\\d+\\.\\d+\\.\\d+(\\.\\d+)?)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/soci-snapshotter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "awslabs/soci-snapshotter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/soft-serve/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/soft-serve",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sonar-scanner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "SonarSource/sonar-scanner-cli",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sonobuoy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vmware-tanzu/sonobuoy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sops/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "getsops/sops",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sotp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "getsops/sotp",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/source-sans/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "adobe-fonts/source-sans",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^(?<version>.+)R$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/spc/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crazywhalecc/static-php-cli",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/spdx-sbom-generator/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opensbom-generator/spdx-sbom-generator",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/speex/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "xiph/speex",
      "datasourceTemplate": "gitlab-releases",
      "registryUrlTemplate": "https://gitlab.xiph.org",
      "extractVersionTemplate": "^Speex-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/speexdsp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "xiph/speexdsp",
      "datasourceTemplate": "gitlab-releases",
      "registryUrlTemplate": "https://gitlab.xiph.org",
      "extractVersionTemplate": "^SpeexDSP-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/spiffe-vault/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "philips-labs/spiffe-vault",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/spin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "fermyon/spin",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/spire/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "spiffe/spire",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ssh3/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "francoismichel/ssh3",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ssh-key-confirmer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "benjojo/ssh-key-confirmer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sshocker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "lima-vm/sshocker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/stargz-snapshotter/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containerd/stargz-snapshotter",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/staticcheck/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dominikh/go-tools",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/stdin-spinner/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sgreben/stdin-spinner",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/stern/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stern/stern",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/stress-ng/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ColinIanKing/stress-ng",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^V(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/structurizr-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "structurizr/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/su-exec/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ncopa/su-exec",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/supdock/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "segersniels/supdock",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/switcher/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "danielfoehrKn/kubeswitch",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/syft/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "anchore/syft",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/sysbox/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "nestybox/sysbox",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/systemd-docker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "oxin-ros/systemd-docker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tabby/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "TabbyML/tabby",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tailspin/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bensadeh/tailspin",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/talosctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "siderolabs/talos",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/task/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "go-task/task",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tasker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stevegrubb/tasker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tea/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gitea/tea",
      "datasourceTemplate": "gitea-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tejolote/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/tejolote",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/telegraf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "influxdata/telegraf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/teleport/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gravitational/teleport",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/teller/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tellerops/teller",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tempo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/tempo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tempo-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "grafana/tempo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/termgraph/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "termgraph",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terminalizer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "terminalizer",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tern/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tern",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terraform/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hashicorp/terraform",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terraform-backend-git/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "plumber-cd/terraform-backend-git",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terraform-docs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "terraform-docs/terraform-docs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terraformer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "GoogleCloudPlatform/terraformer",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/terragrunt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "gruntwork-io/terragrunt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tetragon/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "cilium/tetragon",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/textlint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "textlint",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tig/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "jonas/tig",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^tig-(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/timoni/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "stefanprodan/timoni",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tini/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "krallin/tini",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tinygo/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tinygo-org/tinygo",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tkn/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tektoncd/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tlsx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "projectdiscovery/tlsx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tml/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "liamg/tml",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/toolong/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "toolong",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tracee/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aquasecurity/tracee",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tracer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubeshark/tracer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+?)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/traefik/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "traefik/traefik",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/trillian/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/trillian",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/trivy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aquasecurity/trivy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/trivy-operator/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "aquasecurity/trivy-operator",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/trurl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "curl/trurl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^trurl-(?<version>.+?)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/try/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "binpash/try",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tshark/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wireshark/wiresharkar",
      "datasourceTemplate": "gitlab-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ttyd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tsl0922/ttyd",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tuf/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "theupdateframework/go-tuf",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>1\\..+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tunnelto/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "agrinman/tunnelto",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/typst/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "typst/typst",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/tz/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "oz/tz",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/uidmap/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "shadow-maint/shadow",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/umoci/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "opencontainers/umoci",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/uniget/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/updatecli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "updatecli/updatecli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/upx/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "upx/upx",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/util-linux/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "util-linux/util-linux",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+(\\.\\d+)?)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/uv/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "astral-sh/uv",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vale/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "errata-ai/vale",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/valyent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "valyentdev/cli",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vault/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "hashicorp/vault",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vcluster/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "loft-sh/vcluster",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/valocity/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "uniget-org/renovate-custom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^velocity/(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vendir/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "carvel-dev/vendir",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/venom/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ovh/venom",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vexctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "openvex/vexctl",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vexy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vexy",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vgrep/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vrothberg/vgrep",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vhs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "charmbracelet/vhs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/viking/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "d3witt/viking",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/visidata/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "saulpw/visidata",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vland/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "parke/vland",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vscode-cli/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "microsoft/vscode",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/vulnerability-operator/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ckotzbauer/vulnerability-operator",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wagi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "deislabs/wagi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wait/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ufoscout/docker-compose-wait",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wait-for/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "dnnrly/wait-for",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/walk/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "antonmedv/walk",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/warp/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "minio/warp",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wasmedge/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "WasmEdge/WasmEdge",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wasmer/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wasmerio/wasmer",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wasmi/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wasmi-labs/wasmi",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wasmtime/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "bytecodealliance/wasmtime",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/watchexec/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "watchexec/watchexec",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/watchtower/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containrrr/watchtower",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/webdavfs/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "miquels/webdavfs",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/webhook/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "adnanh/webhook",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/webhookd/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ncarlier/webhookd",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/webhook-tester/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "tarampampam/webhook-tester",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/websocat/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "vi/websocat",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wg/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wireguard-tools",
      "datasourceTemplate": "git-tags",
      "packageNameTemplate": "https://git.zx2c4.com/wireguard-tools",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/whalebrew/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "whalebrew/whalebrew",
      "datasourceTemplate": "github-releases"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/win-gpg-agent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rupor-github/win-gpg-agent",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/win-ssh-agent/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "rupor-github/wsl-ssh-agent",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wireguard-go/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wireguard-go",
      "datasourceTemplate": "git-tags",
      "packageNameTemplate": "https://git.zx2c4.com/wireguard-go"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/witness/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "in-toto/witness",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wksctl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "weaveworks/wksctl",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/woke/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "get-woke/woke",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wolfictl/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wolfi-dev/wolfictl",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/woodpecker/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "woodpecker-ci/woodpecker",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wordcloud/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wordcloud",
      "datasourceTemplate": "pypi",
      "versioningTemplate": "loose"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wsl-open/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "4U6U57/wsl-open",
      "datasourceTemplate": "github-tags",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/wslu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "wslutilities/wslu",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xcaddy/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "caddyserver/xcaddy",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xdg-utils/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "xdg/xdg-utils",
      "datasourceTemplate": "gitlab-tags",
      "registryUrlTemplate": "https://gitlab.freedesktop.org/api/v4/projects/xdg%2fxdg-utils/repository/tags?per_page=100",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+(\\.\\d+)?)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xh/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "ducaale/xh",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xmlstarlet/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "https://git.code.sf.net/p/xmlstar/code",
      "datasourceTemplate": "git-tags"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "sibprogrammer/xq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/xurls/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mvdan/xurls",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yamale/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "yamale",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yamlfmt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "google/yamlfmt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yamllint/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "yamllint",
      "datasourceTemplate": "pypi"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yarn/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "yarn",
      "datasourceTemplate": "npm"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yasu/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "crazy-max/yasu",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yh/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "andreazorzetto/yh",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/youki/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "containers/youki",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/yq/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "mikefarah/yq",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/ytt/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "carvel-dev/ytt",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/zed/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "brimdata/zed",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/zeitgeist/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "kubernetes-sigs/zeitgeist",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/zitadel/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "zitadel/zitadel",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^tools/zot/manifest.yaml$"
      ],
      "matchStrings": [
        "version: \"?(?<currentValue>.*?)\"?\\n"
      ],
      "depNameTemplate": "project-zot/zot",
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^v(?<version>.+)$"
    }
  ],
  "customDatasources": {
    "curl": {
      "defaultRegistryUrlTemplate": "https://api.github.com/repos/curl/curl/releases",
      "format": "json",
      "transformTemplates": [
        "{ \"releases\": [ $[].{ \"version\": $replace( $substring( tag_name, 5 ), '_', '.' ) } ] }"
      ]
    }
  }
}
