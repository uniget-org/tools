#syntax=docker/dockerfile:1.8.1

FROM ghcr.io/uniget-org/tools/rust:latest AS rust

FROM ghcr.io/uniget-org/images/build-essential:24.04 AS prepare
COPY --from=ghcr.io/uniget-org/tools/uniget-build:latest \
    /etc/profile.d/ \
    /etc/profile.d/
SHELL [ "bash", "-clo", "errexit" ]
COPY --link --from=rust / /usr/local/
RUN <<EOF
apt-get update
apt-get -y install --no-install-recommends \
    libssl-dev \
    sudo
EOF
WORKDIR /tmp/github.com/flox/flox
ARG name
ARG version

###############################################################################
#
# Use distribution package from release
#
RUN --mount=type=cache,target=/var/cache/uniget/download <<EOF
url="https://downloads.flox.dev/by-env/stable/deb/flox-${version}.${arch}-linux.deb"
filename="$( basename "${url}" )"

check-download "${url}"
curl --silent --show-error --location --fail --output "${uniget_cache_download}/${filename}" \
    "${url}"

dpkg -c "${uniget_cache_download}/${filename}"
dpkg -i "${uniget_cache_download}/${filename}"
EOF

###############################################################################
#
# Clone for installation methods below
#
#RUN <<EOF
#git clone -q --config advice.detachedHead=false --depth 1 --branch "v${version}" https://github.com/flox/flox .
#EOF

###############################################################################
# CONTRIBUTING.md:
# Use nix to call just to build flox
#
#RUN <<EOF
#version=2.25.2
#arch=x86_64
#curl -sSLf "https://releases.nixos.org/nix/nix-${version}/nix-${version}-${arch}-linux.tar.xz" \
#| tar -xJC /tmp
#"/tmp/nix-${version}-x86_64-linux/install-multi-user"
#EOF
#RUN <<EOF
#nix develop -L --no-update-lock-file \
#    --extra-experimental-features nix-command \
#    --extra-experimental-features flakes \
#    --command \
#        just \
#            build-pkgdb \
#            build-cli
#EOF

###############################################################################
#
# Use nix without repo
#
#RUN <<EOF
#nix profile install \
#    --experimental-features "nix-command flakes" \
#    --accept-flake-config \
#    github:flox/flox/v${version}
#EOF

###############################################################################
#
# Build ourself
#
#RUN <<EOF
#apt-get install -y \
#    nlohmann-json3-dev \
#    libargparse-dev \
#    libsqlite3-dev
#
#    mkdir -p /tmp/sqlite3pp
#git clone https://github.com/aakropotkin/sqlite3pp /tmp/sqlite3pp
#cp -r /tmp/sqlite3pp/include/ /usr/
#cp /tmp/sqlite3pp/lib/pkgconfig/sqlite3pp.pc.in /usr/share/pkgconfig/sqlite3pp.pc
#sed -E 's|@PREFIX@|/usr|' /usr/share/pkgconfig/sqlite3pp.pc
#
#cd pkgdb
#export CXX=gcc
#make pkgdb
#EOF
#RUN <<EOF
#cd cli
#export CARGO_HOME=/usr/local/cargo
#export RUSTUP_HOME=/usr/local/rustup
#export RUSTFLAGS='-C target-feature=+crt-static'
#
#NIX_BIN="${nix}/bin/nix"
#BUILDENV_NIX="${flox-buildenv}/lib/buildenv.nix"
#PKGDB_BIN="${flox-pkgdb}/bin/pkgdb"
#FLOX_BIN="${flox-cli}/bin/flox"
#WATCHDOG_BIN="${flox-watchdog}/libexec/flox-watchdog"
#PROCESS_COMPOSE_BIN="${process-compose}/bin/process-compose"
#FLOX_VERSION="${version}"
#
#cargo build --release --target "${arch}-unknown-linux-gnu"
#cp "target/${arch}-unknown-linux-gnu/release/foo" "${prefix}/bin/"
#EOF

# completion
#RUN <<EOF
#"${prefix}/bin/foo" completion bash >"${prefix}/share/bash-completion/completions/foo"
#"${prefix}/bin/foo" completion fish >"${prefix}/share/fish/vendor_completions.d/foo.fish"
#"${prefix}/bin/foo" completion zsh >"${prefix}/share/zsh/vendor-completions/_foo"
#EOF