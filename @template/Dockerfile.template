#syntax=docker/dockerfile:1.18.0@sha256:dabfc0969b935b2080555ace70ee69a5261af8a8f1b4df97b9e7fbcf6722eddf

#FROM ghcr.io/uniget-org/tools/make:latest AS make
#FROM ghcr.io/uniget-org/tools/go:latest AS go
#FROM ghcr.io/uniget-org/tools/rust:latest AS rust
#FROM ghcr.io/uniget-org/tools/python-3.12:latest AS python
#FROM ghcr.io/uniget-org/tools/shiv:latest AS shiv
#FROM ghcr.io/uniget-org/tools/pipx:latest AS pipx
#FROM ghcr.io/uniget-org/tools/nodejs-lts:latest AS nodejs
#FROM ghcr.io/uniget-org/tools/npm:latest AS npm

FROM registry.gitlab.com/uniget-org/images/ubuntu:24.04 AS prepare
#FROM registry.gitlab.com/uniget-org/images/build-essential:24.04 AS prepare
COPY --from=ghcr.io/uniget-org/tools/uniget-build:latest \
    /etc/profile.d/ \
    /etc/profile.d/
SHELL [ "bash", "-clo", "errexit" ]
ARG name
ARG version

# apt
#RUN --mount=type=cache,target=/var/cache/apt <<EOF
#apt-get update
#apt-get -y install --no-install-recommends \
#    foo
#EOF

# apk
#RUN --mount=type=cache,target=/var/cache/apk <<EOF
#apk add --update-cache \
#    foo
#EOF

# tarball
#RUN --mount=type=cache,target=/var/cache/uniget/download <<EOF
#echo "### Setting architecture string for ${TARGETPLATFORM}"
#case "${arch}" in
#    x86_64)
#        export arch_suffix="${arch}"
#        ;;
#    aarch64)
#        export arch_suffix="${alt_arch}"
#        ;;
#    *)
#        echo "ERROR: Unsupported architecture ${arch}."
#        exit 1
#        ;;
#esac
#echo "    Using ${arch_suffix}"
#
#url=""
#filename="$( basename "${url}" )"
#
#check-download "${url}"
#check-github-release-asset "foo/bar" "v${version}" "${filename}"
#curl --silent --show-error --location --fail --output "${uniget_cache_download}/${filename}" \
#    "${url}"
#
#tar --file="${uniget_cache_download}/${filename}" --list
#tar --file="${uniget_cache_download}/${filename}" --extract --gzip --directory="${prefix}/bin" --no-same-owner
#EOF

# executable
#RUN --mount=type=cache,target=/var/cache/uniget/download <<EOF
#echo "### Setting architecture string for ${TARGETPLATFORM}"
#case "${arch}" in
#    x86_64)
#        export arch_suffix="${arch}"
#        ;;
#    aarch64)
#        export arch_suffix="${alt_arch}"
#        ;;
#    *)
#        echo "ERROR: Unsupported architecture ${arch}."
#        exit 1
#        ;;
#esac
#echo "    Using ${arch_suffix}"
#
#url=""
#filename="$( basename "${url}" )"
#
#check-download "${url}"
#check-github-release-asset "foo/bar" "v${version}" "${filename}"
#curl --silent --show-error --location --fail --output "${uniget_cache_download}/${filename}" \
#    "${url}"
#
#install --mode=0755 \
#    "${uniget_cache_download}/${filename}" \
#    "${prefix}/bin/foo"
#EOF

# zip
#RUN --mount=type=cache,target=/var/cache/uniget/download <<EOF
#echo "### Setting architecture string for ${TARGETPLATFORM}"
#case "${arch}" in
#    x86_64)
#        export arch_suffix="${arch}"
#        ;;
#    aarch64)
#        export arch_suffix="${alt_arch}"
#        ;;
#    *)
#        echo "ERROR: Unsupported architecture ${arch}."
#        exit 1
#        ;;
#esac
#echo "    Using ${arch_suffix}"
#
#url=""
#filename="$(basename "${url}")"
#
#check-download "${url}"
#check-github-release-asset "foo/bar" "v${version}" "${filename}"
#curl --silent --show-error --location --fail --output "${uniget_cache_download}/${filename}" \
#    "${url}"
#
#unzip -q -o -d "${prefix}/bin" "${uniget_cache_download}/${filename}"
#EOF

# go
#COPY --link --from=go / /usr/local/
#COPY --link --from=make / /usr/local/
#WORKDIR /go/src/github.com/foo/bar
#ARG name
#ARG version
#RUN --mount=type=cache,target=/root/go/pkg/mod <<EOF
#check-clone "https://github.com/foo/bar" "v${version}"
#git clone -q --config advice.detachedHead=false --depth 1 --branch "v${version}" https://github.com/foo/bar .
#make
#cp foo "${prefix}/bin/"
#EOF

# rust
#COPY --link --from=rust / /usr/local/
#WORKDIR /tmp/github.com/foo/bar
#RUN <<EOF
#git clone -q --config advice.detachedHead=false --depth 1 --branch "${version}" https://github.com/foo/bar .
#export CARGO_HOME=/usr/local/cargo
#export RUSTUP_HOME=/usr/local/rustup
#export RUSTFLAGS='-C target-feature=+crt-static'
#cargo build --release --target "${arch}-unknown-linux-gnu"
#cp "target/${arch}-unknown-linux-gnu/release/foo" "${prefix}/bin/"
#EOF

# python - shiv
#COPY --link --from=python / /usr/local/
#COPY --link --from=shiv / /usr/local/
#RUN --mount=type=cache,target=/root/.cache/pip <<EOF
#shiv --output-file "${prefix}/bin/foo" --console-script foo "foo==${version}"
#EOF

# python - pipx
#COPY --link --from=python / /usr/local/
#COPY --link --from=pipx / /usr/local/
#RUN --mount=type=cache,target=/root/.cache/pip <<EOF
#export PIPX_HOME="${prefix}/libexec/pipx"
#export PIPX_BIN_DIR="${prefix}/bin"
#pipx install foo
#ln --symbolic --relative --force "${prefix}/libexec/pipx/venvs/foo/bin/foo" "${prefix}/bin/foo"
#sed -i "s|#\!${prefix}/|#\!/|" "${prefix}/libexec/pipx/venvs/foo/bin/foo"
#EOF

# node
#COPY --link --from=nodejs / /usr/local/
#COPY --link --from=npm / /usr/local/
#WORKDIR /uniget_bootstrap/libexec/foo
#ARG name
#ARG version
#RUN <<EOF
#npm install \
#    --omit=dev \
#    "foo@${version}"
#ln --symbolic --relative --force "${prefix}/libexec/foo/node_modules/.bin/foo" "${prefix}/bin/"
#EOF

# c
#COPY --link --from=make / /usr/local/
#WORKDIR /tmp/foo
#RUN <<EOF
#git clone -q --config advice.detachedHead=false --depth 1 --branch "${version}" https://github.com/foo/bar .
#./configure --prefix="${prefix}"
#make LDFLAGS=-static
#make install
#EOF

# dummy for testing
#RUN <<EOF
#touch "${prefix}/foo"
#EOF

# completion
#RUN <<EOF
#"${prefix}/bin/foo" completion bash >"${prefix}/share/bash-completion/completions/foo"
#"${prefix}/bin/foo" completion fish >"${prefix}/share/fish/vendor_completions.d/foo.fish"
#"${prefix}/bin/foo" completion zsh >"${prefix}/share/zsh/vendor-completions/_foo"
#EOF